#ifndef __NVPFM__
#define __NVPFM__
#include "transferlayer/nvptl.h"
#include "commondef.h"
#ifdef __cplusplus
extern "C" {
#endif

#define MAINVER 3
#define SUBVER1 7
#define SUBVER2 20

#define STR(s) #s
#define SDKVERSION(a, b, c) "v" STR(a) "." STR(b) "." STR(c)

#define TRUE 1
#define FALSE 0

typedef signed short NVP_S16;
typedef unsigned long long NVP_U64;
typedef float NVP_FLOAT;
typedef signed int NVP_S32;
typedef int BOOL;

typedef void *NVPFM_DEVICE_HANDLE;
#ifdef _WINDOWS
#define REAL_USB_PACKET_MAX_SIZE (64 * 1024)
#else
#define REAL_USB_PACKET_MAX_SIZE (128 * 1024) // 288*1000+sizeof(NVPTL_USBHeaderDataPacket)+sizeof(NVPFM_USB_IMAGE_HEADER))//256 * 1024)
#endif
#define USB_PACKET_MAX_SIZE (4 * 1024 * 1024 + 1024)
#define MAXDOWNLOADFILESIZE (4 * 1024 * 1024)
#define ONE_PACKET_DATA_MAX_SIZE (USB_PACKET_MAX_SIZE - 16)
#define PREVIEW_FRAME_DATA_MAX_SIZE (ONE_PACKET_DATA_MAX_SIZE - sizeof(FrameHeader))

#define NVPFM_MAX_USER_CUSTOM_CONFIG_SIZE 5
#define NVPFM_APP_MAX_PATH_LEN 256
/** NVPFM_STREAM_TYPE_E */
typedef enum {
  NVPFM_STREAM_DEPTH,         /**< depth stream:0 */
  NVPFM_STREAM_DEPTH_LEFTIR,  /**< left ir stream in depth mode:1 */
  NVPFM_STREAM_DEPTH_RIGHTIR, /**< right ir stream in depth mode:2 */
  NVPFM_STREAM_RGB,           /**< rgb stream:3 */
  NVPFM_STREAM_IMU,           /**< imu stream:4 */
  NVPFM_STREAM_GOODFEATURE,   /**< good feature stream:5 */
  NVPFM_STREAM_OTHER,         /**< good feature stream:6 */
  NVPFM_STREAM_GROUPIMAGES,   /**< depth stream:7 */
  NVPFM_STREAM_SAVE,
} NVPFM_STREAM_TYPE_E;

/** NVPFM_FPS_E */
typedef enum {
  FPS_15, /**< stream fps=15:0 */
  FPS_30, /**< stream fps=30:1 */
  FPS_UNKNOWN,
} NVPFM_FPS_E;
typedef enum {
  NVPFM_DEPTH_CHANNEL0 = 0,
  NVPFM_DEPTH_CHANNEL1,
  NVPFM_DEPTH_NUMBER
} E_NVPFM_DEPTH_CHANNEL;
/** NVPTL_RESULT */

/** NVPFM_VALUE_TYPE */
typedef enum {
  NVPFM_DEPTH_PARAM,            /**< nvpfm_get/set camera param:0 */
  NVPFM_PROJECTOR_STATUS,       /**< nvpfm_get/set projector status:1 */
  NVPFM_DEVICE_INFO,            /**< nvpfm_get/set camera info:2*/
  NVPFM_TIME_SYNC,              /**< nvpfm_set time sync:3*/
  NVPFM_IR_EXPOSURE,            /**< nvpfm_get/set ir exposure:4*/
  NVPFM_RGB_EXPOSURE,           /**< nvpfm_get/set ir exposure:4*/
  NVPFM_RUN_MODE,               /**< nvpfm_get/set run mode:5*/
  NVPFM_DEPTH_CONFIG,           /**< nvpfm_get/set depth config:6*/
  NVPFM_CONFIDENCE,             /**< nvpfm_get/set confidence:7*/
  NVPFM_LIGHT_FILTER,           /**< nvpfm_get/set light filter:8*/
  NVPFM_BAD_FILTER,             /**< nvpfm_get/set bad filter:9*/
  NVPFM_EDGE_FILTER,            /**< nvpfm_get/set edge filter:10*/
  NVPFM_SWITCH_VI_VPSS,         /**< nvpfm_set switch vi/vpss:11*/
  NVPFM_SWITCH_DEPTH_DISPARITY, /**< nvpfm_set switch depth/disparity:12*/
  NVPFM_SET_CAMERA_IP,              /**< nvpfm_set camera ip:13*/
  // NVPFM_PIPELINE,				  /**< nvpfm_set pipeline:14*/
  NVPFM_SAVE_CONFIG,           /**< nvpfm_set save config:15*/
  NVPFM_TRIGGER_SRC,           /**< nvpfm_get/set trigger src:16*/
  NVPFM_TRIGGER_SOFT,          /**< nvpfm_set software trigger:17*/
  NVPFM_IMU_CONFIG,            /**< nvpfm_get/set imu config:18*/
  NVPFM_IMU_INTERNALREF,       /**< current not used,nvpfm_get/set imu internal ref:19*/
  NVPFM_IMU_EXTERNALREF,       /**< current not used,nvpfm_get/set imu external ref:20*/
  NVPFM_DOWNLOAD_FILE,         /**< nvpfm_get download file:21*/
  NVPFM_GOODFEATURE_PARAM,     /**< nvpfm_get/set good feature param:22*/
  NVPFM_LK_PARAM,              /**< nvpfm_get/set lk param:23*/
  NVPFM_HIGH_PRECISION,        /**< nvpfm_get/set high precision:24*/
  NVPFM_REPEAT_TEXTURE_FILTER, /**< nvpfm_get/set repeat texture filter:25*/
  NVPFM_RGB_ELSE_PARAM,        /**< nvpfm_get/set rgb else param:26*/
  NVPFM_CAMERA_TIME,           /**< nvpfm_get camera time param:27*/
  NVPFM_USB_CC_INFO,
  NVPFM_WRITE_KEY,
  NVPFM_CYPHER_STATUS,
  NVPFM_LED,
  NVPFM_SMEAR_FILTER,
  NVPFM_REBOOT_TIME,
  NVPFM_LOGFILEID,
  NVPFM_EFUSE_USER,
  NVPFM_UPGRADE_LED,
  NVPFM_SPATIAL_FILTER,
  NVPFM_TEMPORAL_FILTER,
  NVPFM_SPECKLE_FILTER,
  NVPFM_HIGHLIGHT_FILTER,
  NVPFM_CNN_MODEL,
  NVPFM_SENSOR_CONFIG,
  NVPFM_INNER_PARAM,
  NVPFM_OUTER_PARAM,
  NVPFM_IMU_PARAM,
  NVPFM_UPLOAD_CALIB_START,
  NVPFM_UPLOAD_CALIB_DATA,
  NVPFM_UPLOAD_CALIB_END,
  NVPFM_DOWNLOAD_CALIB,
  NVPFM_FACTORYSTARTIMAGE,
  NVPFM_FACTORYSTOPIMAGE,
  NVPFM_FACTORYSTARTIMU,
  NVPFM_FACTORYSTOPIMU,
  NVPFM_SENSOR_STATUS,
  NVPFM_IMU_STATUS,
  NVPFM_CAN_STATUS,
  NVPFM_TRANSFER_CONFIG,
  NVPFM_LED_CONFIG,
  NVPFM_ENTER_READY,
  NVPFM_EXIT_READY,
  NVPFM_TRIGGER_CONFIG,
  NVPFM_REQ_IFRAME, // for h265
  NVPFM_RUN_READY_MODE,
  // // save get get_all delete load_user
  NVPFM_SAVE_USER_CFG,
  NVPFM_GET_USER_CFG,
  NVPFM_GET_ALL_USER_CFG,
  NVPFM_DELETE_USER_CFG,
  NVPFM_LOAD_USER_CFG,
  // pwr mode
  NVPFM_GET_PWR_MODE_DESC,
  NVPFM_DEPTH_CALCULATE,
  NVPFM_EEPROM,
  NVPFM_CLEAR_CALIB,
  NVPFM_HIGH_LUMA_REMOVAL,
  NVPFM_HIGHPRESION_INFO,
  NVPFM_OUTLIERS_REMOVAL,
  NVPFM_DEPTH_MAP_EXPANSION,
  NVPFM_LOWTEXTURE_REMOVAL,
  NVPFM_AMBIGUITY_REMOVA,
  NVPFM_STEREOCALI_CORRECTION,
  NVPFM_DEPTH_RANGE_JUSTMENT_1,
  NVPFM_DEPTH_RANGE_JUSTMENT_2,
  NVPFM_REPEATED_TEXTURE,
  NVPFM_FUSION2,
  NVPFM_INFER_DEPTH_PROCESS,
  NVPFM_LOG_TAR,
} NVPFM_VALUE_TYPE;

/** NVPFM_PRIMARY_TYPE */

typedef enum {
  NVPFM_IMAGE_DATA,       // 图像数据
  NVPFM_COMMAND_DATA,     // 命令数据
  NVPFM_IMU_DATA,         // IMU数据
  NVPFM_DEVICE_DATA,      // 设备信息
  NVPFM_DSP_PROCESS,      // dsp后处理
  NVPFM_IMAGE_PROCESS,    // 图像操作
  NVPFM_UPDATE_DATA,      // 系统升级和用户文件升级
  NVPFM_LOG_DATA,         // log数据
  NVPFM_CNN_DATA,         // CNN数据
  NVPFM_USER_DATA,        // 用户自定义数据
  NVPFM_CV_DATA,          // CV数据
  NVPFM_DOWNLOAD_DATA,    // 下载
  NVPFM_RESERVED2,        // 预留
  NVPFM_CALIBRATION_DATA, // 标定数据上传下载
  NVPFM_FACTORY_COMMAND,
  NVPFM_PRIMARY_TYPE_NUMBER
} NVPFM_PRIMARY_TYPE;

typedef enum {
  NVPFM_COMMAND_USB_CALIBRATION_START = 0x00, // 开始更新标定文件
  NVPFM_COMMAND_USB_CALIBRATION_START_RETURN = NVPFM_COMMAND_USB_CALIBRATION_START + 1,
  NVPFM_COMMAND_USB_CALIBRATION_DATA = NVPFM_COMMAND_USB_CALIBRATION_START_RETURN + 1, // 更新各标定文件
  NVPFM_COMMAND_USB_CALIBRATION_DATA_RETURN = NVPFM_COMMAND_USB_CALIBRATION_DATA + 1,
  NVPFM_COMMAND_USB_CALIBRATION_END = NVPFM_COMMAND_USB_CALIBRATION_DATA_RETURN + 1, // 更新标定文件结束，写入flash或者eeprom
  NVPFM_COMMAND_USB_CALIBRATION_END_RETURN = NVPFM_COMMAND_USB_CALIBRATION_END + 1,

  NVPFM_COMMAND_USB_CALIBRATION_DOWNLOAD = NVPFM_COMMAND_USB_CALIBRATION_END_RETURN + 1, // 下载标定文件,压缩成tar包格式
  NVPFM_COMMAND_USB_CALIBRATION_DOWNLOAD_RETURN = NVPFM_COMMAND_USB_CALIBRATION_DOWNLOAD + 1,
} NVPFM_CALIBRATION_SUB_TYPE;
#define NVPFM_FACTORY_RESERVED_LEN 0x1000
typedef enum {
  NVPFM_FACTORY_START_IMAGE = 0x0000, // 开始传图
  NVPFM_FACTORY_START_IMAGE_RETURN = (NVPFM_FACTORY_START_IMAGE + 1),
  NVPFM_FACTORY_STOP_IMAGE = (NVPFM_FACTORY_START_IMAGE_RETURN + 1), // 停止传图
  NVPFM_FACTORY_STOP_IMAGE_RETURN = (NVPFM_FACTORY_STOP_IMAGE + 1),
  NVPFM_FACTORY_START_IMU = (NVPFM_FACTORY_STOP_IMAGE_RETURN + 1), // 开始传IMU
  NVPFM_FACTORY_START_IMU_RETURN = (NVPFM_FACTORY_START_IMU + 1),
  NVPFM_FACTORY_STOP_IMU = (NVPFM_FACTORY_START_IMU_RETURN + 1), // 停止传IMU
  NVPFM_FACTORY_STOP_IMU_RETURN = (NVPFM_FACTORY_STOP_IMU + 1),
  NVPFM_FACTORY_START_CAN = (NVPFM_FACTORY_STOP_IMU_RETURN + 1), // 开始传CAN
  NVPFM_FACTORY_START_CAN_RETURN = (NVPFM_FACTORY_START_CAN + 1),
  NVPFM_FACTORY_STOP_CAN = (NVPFM_FACTORY_START_CAN_RETURN + 1), // 停止传can
  NVPFM_FACTORY_STOP_CAN_RETURN = (NVPFM_FACTORY_STOP_CAN + 1),

  NVPFM_FACTORY_RESERVED_START = (NVPFM_FACTORY_STOP_CAN_RETURN + 1),
  NVPFM_FACTORY_RESERVED_END = (NVPFM_FACTORY_RESERVED_START + NVPFM_FACTORY_RESERVED_LEN - 1),

  NVPFM_FACTORY_UPGRADE_HARDWARE_FILE = (NVPFM_FACTORY_RESERVED_END + 1), // 上传hardware_cfg.json
  NVPFM_FACTORY_UPGRADE_HARDWARE_FILE_RETURN = (NVPFM_FACTORY_UPGRADE_HARDWARE_FILE + 1),
  NVPFM_FACTORY_DOWNLOAD_HARDWARE_FILE = (NVPFM_FACTORY_UPGRADE_HARDWARE_FILE_RETURN + 1), // 下载hardware_cfg.json
  NVPFM_FACTORY_DOWNLOAD_HARDWARE_FILE_RETURN = (NVPFM_FACTORY_DOWNLOAD_HARDWARE_FILE + 1),
  // 设置/获取eeprom副板的sn
  NVPFM_FACTORY_SET_EEPROM_SN = (NVPFM_FACTORY_DOWNLOAD_HARDWARE_FILE_RETURN + 1),
  NVPFM_FACTORY_SET_EEPROM_SN_RETURN = (NVPFM_FACTORY_SET_EEPROM_SN + 1),
  NVPFM_FACTORY_GET_EEPROM_SN = (NVPFM_FACTORY_SET_EEPROM_SN_RETURN + 1),
  NVPFM_FACTORY_GET_EEPROM_SN_RETURN = (NVPFM_FACTORY_GET_EEPROM_SN + 1),
  // 清除标定文件
  NVPFM_FACTORY_CLEAR_CALIB = (NVPFM_FACTORY_GET_EEPROM_SN_RETURN + 1),
  NVPFM_FACTORY_CLEAR_CALIB_RETURN = (NVPFM_FACTORY_CLEAR_CALIB + 1),
} NVPFM_FACTORY_SUB_TYPE;
typedef enum {
  NVPFM_EEPROM_CHANNEL0 = 0,
  NVPFM_EEPROM_CHANNEL1,
  NVPFM_EEPROM_NUMBER,
  NVPFM_EEPROM_CHANNEL_UNKNOWN
} E_NVPFM_EEPROM_CHANNEL;

typedef enum {
  E_CALIB_STORE_IN_FLASH = 0,
  E_CALIB_STORE_IN_EEPROM_CHANNEL0,
  E_CALIB_STORE_IN_EEPROM_CHANNEL1,
  E_CALIB_STORE_UNKNOWN
} E_NVPFM_CALIB_STORE_POS;
//for NVPFM_COMMAND_SET_IP_ADDR
typedef struct
{
   char ip[16];//192.168.xxx.xxx
}s_nvpfm_set_ip;
typedef struct
{
  int ret; // 0:ok -1:failed
} s_factory_set_ret;

// for NVPFM_FACTORY_UPGRADE_HARDWARE_FILE
typedef struct
{
  int file_len; // max 40*1024
  char data[0];
} s_factory_upgrade_hardware_data;

// for NVPFM_FACTORY_DOWNLOAD_HARDWARE_FILE_RETURN
typedef struct
{
  int result; //-1获取失败 0获取成功
  char data[0];
} s_factory_get_hardware_result;

// for NVPFM_FACTORY_SET_EEPROM_SN
typedef struct
{
  E_NVPFM_EEPROM_CHANNEL channel;
  char sn[24];
} s_factory_set_eeprom_sn;
// for NVPFM_FACTORY_SET_EEPROM_SN_RETURN
typedef struct
{
  int result; //-2设备不存在 -1 操作失败   0操作成功
  E_NVPFM_EEPROM_CHANNEL channel;
} s_factory_set_eeprom_sn_ret;

// for NVPFM_FACTORY_GET_EEPROM_SN
typedef struct
{
  E_NVPFM_EEPROM_CHANNEL channel;
} s_factory_get_eeprom_sn;
// for NVPFM_FACTORY_GET_EEPROM_SN_RETURN
typedef struct
{
  int result; //-2设备不存在 -1 操作失败   0操作成功
  E_NVPFM_EEPROM_CHANNEL channel;
  char sn[24];
} s_factory_get_eeprom_sn_ret;

// NVPFM_FACTORY_CLEAR_CALIB
typedef struct
{
  E_NVPFM_CALIB_STORE_POS type;
} s_factory_clear_calib;

typedef struct
{
  int result; // 设备不存在  -1操作失败   0操作成功
  E_NVPFM_CALIB_STORE_POS type;
} s_factory_clear_calib_return;
typedef enum {
  CALIBRATION_SENSOR_LUT = 0,
  CALIBRATION_SENSOR_INNER_PARAM,
  CALIBRATION_SENSOR_OUTTER_PARAM,
  CALIBRATION_SENSOR_GOLDEN_DIFF
} NVPFM_CALIBRATION_SENSOR_TYPE;

typedef enum {
  CALIBRATION_IMU_INNER_PARAM = 0, // imu_internal_reference.txt
  CALIBRATION_IMU_OUTTER_PARAM1,   // imu.yaml
  CALIBRATION_IMU_OUTTER_PARAM2,   // camchain-imucam.yaml
  CALIBRATION_IMU_INNER_PARAM1,    // imu_internal_param.txt
} NVPFM_CALIBRATION_IMU_TYPE;

typedef enum {
  CALIBRATION_SENSOR = 0,
  CALIBRATION_IMU,
  CALIBRATION_TYPE_MAX,
} NVPFM_CALIBRATION_TYPE;

// NVPFM_COMMAND_USB_CALIBRATION_START/NVPFM_COMMAND_USB_CALIBRATION_START_RETURN
// 没有数据域

// NVPFM_COMMAND_USB_CALIBRATION_DATA
typedef struct
{
  uint32_t packet_numbers;
  uint32_t curr_packet_numbers;
  uint32_t data_len;
  char name[100];
  uint16_t type;       // NVPFM_CALIBRATION_TYPE
  uint16_t frame_size; // NVPFM_IMAGE_SIZE， 仅当NVPFM_CALIBRATION_TYPE为CALIBRATION_SENSOR时有效
  uint16_t channel;    // E_NVPFM_SENSOR_CHANNEL 或 E_NVPFM_IMU_CHANNEL
  uint16_t sub_type;   // NVPFM_CALIBRATION_SENSOR_TYPE  或 NVPFM_CALIBRATION_IMU_TYPE
  char data[0];
} s_nvpfm_calibration_data;

// NVPFM_COMMAND_USB_CALIBRATION_DATA_RETURN
typedef struct
{
  int result; //-2无法更新该文件，-1更新失败，0-当前包更新成功，  1-更新完成
} s_nvpfm_calibration_result;

// NVPFM_COMMAND_USB_CALIBRATION_END/NVPFM_COMMAND_USB_CALIBRATION_END_RETURN
// 没有数据域
typedef enum {
  MASTER_TRIGGER = 0x0,
  SLAVE_TRIGGER,
  APP_TRIGGER_UNKNOWN
} E_NVPFM_APP_TRIGGER_METHOD;
// NVPFM_COMMAND_USB_CALIBRATION_DOWNLOAD
// 没有数据域
// for NVPFM_COMMAND_SET_TRIGGER_CONFIG_COMMAND
typedef struct
{
  E_NVPFM_APP_TRIGGER_METHOD trigger_method;

  int reserved[32];
} s_nvpfm_app_trigger_config;

typedef struct
{
  int ret;
  s_nvpfm_app_trigger_config config;
} s_nvpfm_get_app_trigger_config_ret;

typedef struct
{
  int result; //-3 内存不足  -2 文件打开失败 -1文件不存在 0获取成功
  char data[0];
} s_nvpfm_calibration_download_result;
/*********************************************************************************************************************/
/*********************************************************************************************************************/
/*********************************************************************************************************************/
/************************************************depth静态配置********************************************************/
/*********************************************************************************************************************/
/*********************************************************************************************************************/
/*********************************************************************************************************************/
typedef enum {
  NVPFM_DSP_SET_STATIC_CONFIG_COMMAND = 0x0000,
  NVPFM_DSP_SET_STATIC_CONFIG_COMMAND_RETURN = NVPFM_DSP_SET_STATIC_CONFIG_COMMAND + 1,
  NVPFM_DSP_GET_STATIC_CONFIG_COMMAND = NVPFM_DSP_SET_STATIC_CONFIG_COMMAND_RETURN + 1,
  NVPFM_DSP_GET_STATIC_CONFIG_COMMAND_RETURN = NVPFM_DSP_GET_STATIC_CONFIG_COMMAND + 1,

  NVPFM_DSP_RESERVED_LEN = 0x1000,
  NVPFM_DSP_RESERVED_START = NVPFM_DSP_GET_STATIC_CONFIG_COMMAND_RETURN + 1,
  NVPFM_DSP_RESERVED_END = NVPFM_DSP_RESERVED_START + NVPFM_DSP_RESERVED_LEN - 1,

  /*********************************************************************************************************************/
  /*********************************************************************************************************************/
  /*********************************************************************************************************************/
  /************************************************depth动态配置********************************************************/
  /*********************************************************************************************************************/
  /*********************************************************************************************************************/
  /*********************************************************************************************************************/
  NVPFM_COMMAND_SET_DEPTH_RESOLUTION_AFTER_RESIZE_COMMAND = NVPFM_DSP_RESERVED_END + 1,
  NVPFM_COMMAND_SET_DEPTH_RESOLUTION_AFTER_RESIZE_RETURN = NVPFM_COMMAND_SET_DEPTH_RESOLUTION_AFTER_RESIZE_COMMAND + 1,
  NVPFM_COMMAND_GET_DEPTH_RESOLUTION_AFTER_RESIZE_COMMAND = NVPFM_COMMAND_SET_DEPTH_RESOLUTION_AFTER_RESIZE_RETURN + 1,
  NVPFM_COMMAND_GET_DEPTH_RESOLUTION_AFTER_RESIZE_RETURN = NVPFM_COMMAND_GET_DEPTH_RESOLUTION_AFTER_RESIZE_COMMAND + 1,

  NVPFM_COMMAND_SET_GOLDEN_DIFF_PARAM_COMMAND = NVPFM_COMMAND_GET_DEPTH_RESOLUTION_AFTER_RESIZE_RETURN + 1,
  NVPFM_COMMAND_SET_GOLDEN_DIFF_PARAM_RETURN = NVPFM_COMMAND_SET_GOLDEN_DIFF_PARAM_COMMAND + 1,
  NVPFM_COMMAND_GET_GOLDEN_DIFF_PARAM_COMMAND = NVPFM_COMMAND_SET_GOLDEN_DIFF_PARAM_RETURN + 1,
  NVPFM_COMMAND_GET_GOLDEN_DIFF_PARAM_RETURN = NVPFM_COMMAND_GET_GOLDEN_DIFF_PARAM_COMMAND + 1,

  NVPFM_COMMAND_SET_CONFIDENCE_PARAM = NVPFM_COMMAND_GET_GOLDEN_DIFF_PARAM_RETURN + 1,
  NVPFM_COMMAND_SET_CONFIDENCE_PARAM_RETURN = NVPFM_COMMAND_SET_CONFIDENCE_PARAM + 1,
  NVPFM_COMMAND_GET_CONFIDENCE_PARAM = NVPFM_COMMAND_SET_CONFIDENCE_PARAM_RETURN + 1,
  NVPFM_COMMAND_GET_CONFIDENCE_PARAM_RETURN = NVPFM_COMMAND_GET_CONFIDENCE_PARAM + 1,

  NVPFM_COMMAND_SET_LIGHT_FILTER_PARAM = NVPFM_COMMAND_GET_CONFIDENCE_PARAM_RETURN + 1,
  NVPFM_COMMAND_SET_LIGHT_FILTER_PARAM_RETURN = NVPFM_COMMAND_SET_LIGHT_FILTER_PARAM + 1,
  NVPFM_COMMAND_GET_LIGHT_FILTER_PARAM = NVPFM_COMMAND_SET_LIGHT_FILTER_PARAM_RETURN + 1,
  NVPFM_COMMAND_GET_LIGHT_FILTER_PARAM_RETURN = NVPFM_COMMAND_GET_LIGHT_FILTER_PARAM + 1,

  NVPFM_COMMAND_SET_GOOD_FEATURE_PARAM = NVPFM_COMMAND_GET_LIGHT_FILTER_PARAM_RETURN + 1,
  NVPFM_COMMAND_SET_GOOD_FEATURE_PARAM_RETURN = NVPFM_COMMAND_SET_GOOD_FEATURE_PARAM + 1,
  NVPFM_COMMAND_GET_GOOD_FEATURE_PARAM = NVPFM_COMMAND_SET_GOOD_FEATURE_PARAM_RETURN + 1,
  NVPFM_COMMAND_GET_GOOD_FEATURE_PARAM_RETURN = NVPFM_COMMAND_GET_GOOD_FEATURE_PARAM + 1,

  NVPFM_COMMAND_SET_BAD_FILTER_PARAM = NVPFM_COMMAND_GET_GOOD_FEATURE_PARAM_RETURN + 1,
  NVPFM_COMMAND_SET_BAD_FILTER_PARAM_RETURN = NVPFM_COMMAND_SET_BAD_FILTER_PARAM + 1,
  NVPFM_COMMAND_GET_BAD_FILTER_PARAM = NVPFM_COMMAND_SET_BAD_FILTER_PARAM_RETURN + 1,
  NVPFM_COMMAND_GET_BAD_FILTER_PARAM_RETURN = NVPFM_COMMAND_GET_BAD_FILTER_PARAM + 1,

  NVPFM_COMMAND_SET_HIGH_PRECISION_PARAM = NVPFM_COMMAND_GET_BAD_FILTER_PARAM_RETURN + 1,
  NVPFM_COMMAND_SET_HIGH_PRECISION_PARAM_RETURN = NVPFM_COMMAND_SET_HIGH_PRECISION_PARAM + 1,
  NVPFM_COMMAND_GET_HIGH_PRECISION_PARAM = NVPFM_COMMAND_SET_HIGH_PRECISION_PARAM_RETURN + 1,
  NVPFM_COMMAND_GET_HIGH_PRECISION_PARAM_RETURN = NVPFM_COMMAND_GET_HIGH_PRECISION_PARAM + 1,

  NVPFM_COMMAND_SET_LK_PARAM = NVPFM_COMMAND_GET_HIGH_PRECISION_PARAM_RETURN + 1,
  NVPFM_COMMAND_SET_LK_PARAM_RETURN = NVPFM_COMMAND_SET_LK_PARAM + 1,
  NVPFM_COMMAND_GET_LK_PARAM = NVPFM_COMMAND_SET_LK_PARAM_RETURN + 1,
  NVPFM_COMMAND_GET_LK_PARAM_RETURN = NVPFM_COMMAND_GET_LK_PARAM + 1,

  /* 设置/获取去重复纹理 参数 */
  NVPFM_COMMAND_SET_REPEATED_TEXTURE_PARAM = NVPFM_COMMAND_GET_LK_PARAM_RETURN + 1,
  NVPFM_COMMAND_SET_REPEATED_TEXTURE_PARAM_RETURN = NVPFM_COMMAND_SET_REPEATED_TEXTURE_PARAM + 1,
  NVPFM_COMMAND_GET_REPEATED_TEXTURE_PARAM = NVPFM_COMMAND_SET_REPEATED_TEXTURE_PARAM_RETURN + 1,
  NVPFM_COMMAND_GET_REPEATED_TEXTURE_PARAM_RETURN = NVPFM_COMMAND_GET_REPEATED_TEXTURE_PARAM + 1,
  /* 设置/获取空域滤波参数[spatial_filter]  dsp叫双边滤波[bilateral_filter]*/
  NVPFM_COMMAND_SET_SPATIAL_FILTER_PARAM = NVPFM_COMMAND_GET_REPEATED_TEXTURE_PARAM_RETURN + 1,
  NVPFM_COMMAND_SET_SPATIAL_FILTER_PARAM_RETURN = NVPFM_COMMAND_SET_SPATIAL_FILTER_PARAM + 1,
  NVPFM_COMMAND_GET_SPATIAL_FILTER_PARAM = NVPFM_COMMAND_SET_SPATIAL_FILTER_PARAM_RETURN + 1,
  NVPFM_COMMAND_GET_SPATIAL_FILTER_PARAM_RETURN = NVPFM_COMMAND_GET_SPATIAL_FILTER_PARAM + 1,
  /* 设置/获取飞点过滤参数 */
  NVPFM_COMMAND_SET_SMEAR_FILTER_PARAM = NVPFM_COMMAND_GET_SPATIAL_FILTER_PARAM_RETURN + 1,
  NVPFM_COMMAND_SET_SMEAR_FILTER_PARAM_RETURN = NVPFM_COMMAND_SET_SMEAR_FILTER_PARAM + 1,
  NVPFM_COMMAND_GET_SMEAR_FILTER_PARAM = NVPFM_COMMAND_SET_SMEAR_FILTER_PARAM_RETURN + 1,
  NVPFM_COMMAND_GET_SMEAR_FILTER_PARAM_RETURN = NVPFM_COMMAND_GET_SMEAR_FILTER_PARAM + 1,
  /* 设置/获取炫光过滤参数 */
  NVPFM_COMMAND_SET_SPECKLE_FILTER_PARAM = NVPFM_COMMAND_GET_SMEAR_FILTER_PARAM_RETURN + 1,
  NVPFM_COMMAND_SET_SPECKLE_FILTER_PARAM_RETURN = NVPFM_COMMAND_SET_SPECKLE_FILTER_PARAM + 1,
  NVPFM_COMMAND_GET_SPECKLE_FILTER_PARAM = NVPFM_COMMAND_SET_SPECKLE_FILTER_PARAM_RETURN + 1,
  NVPFM_COMMAND_GET_SPECKLE_FILTER_PARAM_RETURN = NVPFM_COMMAND_GET_SPECKLE_FILTER_PARAM + 1,
  /* 设置/获取时域滤波参数 */
  NVPFM_COMMAND_SET_TEMPORAL_FILTER_PARAM = NVPFM_COMMAND_GET_SPECKLE_FILTER_PARAM_RETURN + 1,
  NVPFM_COMMAND_SET_TEMPORAL_FILTER_PARAM_RETURN = NVPFM_COMMAND_SET_TEMPORAL_FILTER_PARAM + 1,
  NVPFM_COMMAND_GET_TEMPORAL_FILTER_PARAM = NVPFM_COMMAND_SET_TEMPORAL_FILTER_PARAM_RETURN + 1,
  NVPFM_COMMAND_GET_TEMPORAL_FILTER_PARAM_RETURN = NVPFM_COMMAND_GET_TEMPORAL_FILTER_PARAM + 1,
  /* 设置/获取TextLight参数 */
  NVPFM_COMMAND_SET_TEXT_LIGHT_FILTER_PARAM = NVPFM_COMMAND_GET_TEMPORAL_FILTER_PARAM_RETURN + 1,
  NVPFM_COMMAND_SET_TEXT_LIGHT_FILTER_PARAM_RETURN = NVPFM_COMMAND_SET_TEXT_LIGHT_FILTER_PARAM + 1,
  NVPFM_COMMAND_GET_TEXT_LIGHT_FILTER_PARAM = NVPFM_COMMAND_SET_TEXT_LIGHT_FILTER_PARAM_RETURN + 1,
  NVPFM_COMMAND_GET_TEXT_LIGHT_FILTER_PARAM_RETURN = NVPFM_COMMAND_GET_TEXT_LIGHT_FILTER_PARAM + 1,
  /* 设置/获取AGG参数 */
  NVPFM_COMMAND_SET_AGG_PROCESS_PARAM = NVPFM_COMMAND_GET_TEXT_LIGHT_FILTER_PARAM_RETURN + 1,
  NVPFM_COMMAND_SET_AGG_PROCESS_PARAM_RETURN = NVPFM_COMMAND_SET_AGG_PROCESS_PARAM + 1,
  NVPFM_COMMAND_GET_AGG_PROCESS_PARAM = NVPFM_COMMAND_SET_AGG_PROCESS_PARAM_RETURN + 1,
  NVPFM_COMMAND_GET_AGG_PROCESS_PARAM_RETURN = NVPFM_COMMAND_GET_AGG_PROCESS_PARAM + 1,
  /* 设置/获取DEPTH_HIGH_LIGHT参数 */
  NVPFM_COMMAND_SET_DEPTH_HIGH_LIGHT_PROCESS_PARAM = NVPFM_COMMAND_GET_AGG_PROCESS_PARAM_RETURN + 1,
  NVPFM_COMMAND_SET_DEPTH_HIGH_LIGHT_PROCESS_PARAM_RETURN = NVPFM_COMMAND_SET_DEPTH_HIGH_LIGHT_PROCESS_PARAM + 1,
  NVPFM_COMMAND_GET_DEPTH_HIGH_LIGHT_PROCESS_PARAM = NVPFM_COMMAND_SET_DEPTH_HIGH_LIGHT_PROCESS_PARAM_RETURN + 1,
  NVPFM_COMMAND_GET_DEPTH_HIGH_LIGHT_PROCESS_PARAM_RETURN = NVPFM_COMMAND_GET_DEPTH_HIGH_LIGHT_PROCESS_PARAM + 1,
  /* 设置/获取RIGHT_UP_DOWN参数 */
  NVPFM_COMMAND_SET_DEPTH_RIGHT_UP_DOWN_PROCESS_PARAM = NVPFM_COMMAND_GET_DEPTH_HIGH_LIGHT_PROCESS_PARAM_RETURN + 1,
  NVPFM_COMMAND_SET_DEPTH_RIGHT_UP_DOWN_PROCESS_PARAM_RETURN = NVPFM_COMMAND_SET_DEPTH_RIGHT_UP_DOWN_PROCESS_PARAM + 1,
  NVPFM_COMMAND_GET_DEPTH_RIGHT_UP_DOWN_PROCESS_PARAM = NVPFM_COMMAND_SET_DEPTH_RIGHT_UP_DOWN_PROCESS_PARAM_RETURN + 1,
  NVPFM_COMMAND_GET_DEPTH_RIGHT_UP_DOWN_PROCESS_PARAM_RETURN = NVPFM_COMMAND_GET_DEPTH_RIGHT_UP_DOWN_PROCESS_PARAM + 1,

  /* 设置/获取light strip参数 */
  NVPFM_COMMAND_SET_LIGHT_STRIP_PROCESS_PARAM = NVPFM_COMMAND_GET_DEPTH_RIGHT_UP_DOWN_PROCESS_PARAM_RETURN + 1,
  NVPFM_COMMAND_SET_LIGHT_STRIP_PROCESS_PARAM_RETURN = NVPFM_COMMAND_SET_LIGHT_STRIP_PROCESS_PARAM + 1,
  NVPFM_COMMAND_GET_LIGHT_STRIP_PROCESS_PARAM = NVPFM_COMMAND_SET_LIGHT_STRIP_PROCESS_PARAM_RETURN + 1,
  NVPFM_COMMAND_GET_LIGHT_STRIP_PROCESS_PARAM_RETURN = NVPFM_COMMAND_GET_LIGHT_STRIP_PROCESS_PARAM + 1,

  NVPFM_COMMAND_DSP_DEBUG2_BASE = NVPFM_DSP_SET_STATIC_CONFIG_COMMAND + 0x2000,
  /* 设置/获取高精度2参数 */
  NVPFM_COMMAND_SET_HIGH_PRECISION2_PARAM = NVPFM_COMMAND_DSP_DEBUG2_BASE,
  NVPFM_COMMAND_SET_HIGH_PRECISION2_PARAM_RETURN = NVPFM_COMMAND_SET_HIGH_PRECISION2_PARAM + 1,
  NVPFM_COMMAND_GET_HIGH_PRECISION2_PARAM = NVPFM_COMMAND_SET_HIGH_PRECISION2_PARAM_RETURN + 1,
  NVPFM_COMMAND_GET_HIGH_PRECISION2_PARAM_RETURN = NVPFM_COMMAND_GET_HIGH_PRECISION2_PARAM + 1,
  /* 设置/获取去重复纹理2 参数 */
  NVPFM_COMMAND_SET_REPEATED_TEXTURE2_PARAM = NVPFM_COMMAND_GET_HIGH_PRECISION2_PARAM_RETURN + 1,
  NVPFM_COMMAND_SET_REPEATED_TEXTURE2_PARAM_RETURN = NVPFM_COMMAND_SET_REPEATED_TEXTURE2_PARAM + 1,
  NVPFM_COMMAND_GET_REPEATED_TEXTURE2_PARAM = NVPFM_COMMAND_SET_REPEATED_TEXTURE2_PARAM_RETURN + 1,
  NVPFM_COMMAND_GET_REPEATED_TEXTURE2_PARAM_RETURN = NVPFM_COMMAND_GET_REPEATED_TEXTURE2_PARAM + 1,
  /* 设置/获取炫光过滤2参数 */
  NVPFM_COMMAND_SET_SPECKLE_FILTER2_PARAM = NVPFM_COMMAND_GET_REPEATED_TEXTURE2_PARAM_RETURN + 1,
  NVPFM_COMMAND_SET_SPECKLE_FILTER2_PARAM_RETURN = NVPFM_COMMAND_SET_SPECKLE_FILTER2_PARAM + 1,
  NVPFM_COMMAND_GET_SPECKLE_FILTER2_PARAM = NVPFM_COMMAND_SET_SPECKLE_FILTER2_PARAM_RETURN + 1,
  NVPFM_COMMAND_GET_SPECKLE_FILTER2_PARAM_RETURN = NVPFM_COMMAND_GET_SPECKLE_FILTER2_PARAM + 1,

  /*********************************************************************************************************************/
  /*********************************************************************************************************************/
  /*********************************************************************************************************************/
  /************************************************dsp infer tool 配置**************************************************/
  /*********************************************************************************************************************/
  /*********************************************************************************************************************/
  /*********************************************************************************************************************/
  // dsp infer tool command base
  NVPFM_COMMAND_DSP_INFER_TOOL_CMD_BASE = NVPFM_DSP_SET_STATIC_CONFIG_COMMAND + 0x3000,
  NVPFM_COMMAND_SET_HIGH_LUMA_REMOVAL = NVPFM_COMMAND_DSP_INFER_TOOL_CMD_BASE,
  NVPFM_COMMAND_SET_HIGH_LUMA_REMOVAL_RETURN = NVPFM_COMMAND_SET_HIGH_LUMA_REMOVAL + 1,
  NVPFM_COMMAND_GET_HIGH_LUMA_REMOVAL = NVPFM_COMMAND_SET_HIGH_LUMA_REMOVAL_RETURN + 1,
  NVPFM_COMMAND_GET_HIGH_LUMA_REMOVAL_RETURN = NVPFM_COMMAND_GET_HIGH_LUMA_REMOVAL + 1,

  NVPFM_COMMAND_SET_HIGHPRESION = NVPFM_COMMAND_GET_HIGH_LUMA_REMOVAL_RETURN + 1,
  NVPFM_COMMAND_SET_HIGHPRESION_RETURN = NVPFM_COMMAND_SET_HIGHPRESION + 1,
  NVPFM_COMMAND_GET_HIGHPRESION = NVPFM_COMMAND_SET_HIGHPRESION_RETURN + 1,
  NVPFM_COMMAND_GET_HIGHPRESION_RETURN = NVPFM_COMMAND_GET_HIGHPRESION + 1,

  NVPFM_COMMAND_SET_OUTLIERS_REMOVAL = NVPFM_COMMAND_GET_HIGHPRESION_RETURN + 1,
  NVPFM_COMMAND_SET_OUTLIERS_REMOVAL_RETURN = NVPFM_COMMAND_SET_OUTLIERS_REMOVAL + 1,
  NVPFM_COMMAND_GET_OUTLIERS_REMOVAL = NVPFM_COMMAND_SET_OUTLIERS_REMOVAL_RETURN + 1,
  NVPFM_COMMAND_GET_OUTLIERS_REMOVAL_RETURN = NVPFM_COMMAND_GET_OUTLIERS_REMOVAL + 1,

  NVPFM_COMMAND_SET_DEPTH_MAP_EXPANSION = NVPFM_COMMAND_GET_OUTLIERS_REMOVAL_RETURN + 1,
  NVPFM_COMMAND_SET_DEPTH_MAP_EXPANSION_RETURN = NVPFM_COMMAND_SET_DEPTH_MAP_EXPANSION + 1,
  NVPFM_COMMAND_GET_DEPTH_MAP_EXPANSION = NVPFM_COMMAND_SET_DEPTH_MAP_EXPANSION_RETURN + 1,
  NVPFM_COMMAND_GET_DEPTH_MAP_EXPANSION_RETURN = NVPFM_COMMAND_GET_DEPTH_MAP_EXPANSION + 1,

  NVPFM_COMMAND_SET_LOWTEXTURE_REMOVAL = NVPFM_COMMAND_GET_DEPTH_MAP_EXPANSION_RETURN + 1,
  NVPFM_COMMAND_SET_LOWTEXTURE_REMOVAL_RETURN = NVPFM_COMMAND_SET_LOWTEXTURE_REMOVAL + 1,
  NVPFM_COMMAND_GET_LOWTEXTURE_REMOVAL = NVPFM_COMMAND_SET_LOWTEXTURE_REMOVAL_RETURN + 1,
  NVPFM_COMMAND_GET_LOWTEXTURE_REMOVAL_RETURN = NVPFM_COMMAND_GET_LOWTEXTURE_REMOVAL + 1,

  NVPFM_COMMAND_SET_AMBIGUITY_REMOVAL = NVPFM_COMMAND_GET_LOWTEXTURE_REMOVAL_RETURN + 1,
  NVPFM_COMMAND_SET_AMBIGUITY_REMOVAL_RETURN = NVPFM_COMMAND_SET_AMBIGUITY_REMOVAL + 1,
  NVPFM_COMMAND_GET_AMBIGUITY_REMOVAL = NVPFM_COMMAND_SET_AMBIGUITY_REMOVAL_RETURN + 1,
  NVPFM_COMMAND_GET_AMBIGUITY_REMOVAL_RETURN = NVPFM_COMMAND_GET_AMBIGUITY_REMOVAL + 1,

  NVPFM_COMMAND_SET_STEREOCALI_CORRECTION = NVPFM_COMMAND_GET_AMBIGUITY_REMOVAL_RETURN + 1,
  NVPFM_COMMAND_SET_STEREOCALI_CORRECTION_RETURN = NVPFM_COMMAND_SET_STEREOCALI_CORRECTION + 1,
  NVPFM_COMMAND_GET_STEREOCALI_CORRECTION = NVPFM_COMMAND_SET_STEREOCALI_CORRECTION_RETURN + 1,
  NVPFM_COMMAND_GET_STEREOCALI_CORRECTION_RETURN = NVPFM_COMMAND_GET_STEREOCALI_CORRECTION + 1,

  NVPFM_COMMAND_SET_DEPTH_RANGE_JUSTMENT_1 = NVPFM_COMMAND_GET_STEREOCALI_CORRECTION_RETURN + 1,
  NVPFM_COMMAND_SET_DEPTH_RANGE_JUSTMENT_1_RETURN = NVPFM_COMMAND_SET_DEPTH_RANGE_JUSTMENT_1 + 1,
  NVPFM_COMMAND_GET_DEPTH_RANGE_JUSTMENT_1 = NVPFM_COMMAND_SET_DEPTH_RANGE_JUSTMENT_1_RETURN + 1,
  NVPFM_COMMAND_GET_DEPTH_RANGE_JUSTMENT_1_RETURN = NVPFM_COMMAND_GET_DEPTH_RANGE_JUSTMENT_1 + 1,

  NVPFM_COMMAND_SET_DEPTH_RANGE_JUSTMENT_2 = NVPFM_COMMAND_GET_DEPTH_RANGE_JUSTMENT_1_RETURN + 1,
  NVPFM_COMMAND_SET_DEPTH_RANGE_JUSTMENT_2_RETURN = NVPFM_COMMAND_SET_DEPTH_RANGE_JUSTMENT_2 + 1,
  NVPFM_COMMAND_GET_DEPTH_RANGE_JUSTMENT_2 = NVPFM_COMMAND_SET_DEPTH_RANGE_JUSTMENT_2_RETURN + 1,
  NVPFM_COMMAND_GET_DEPTH_RANGE_JUSTMENT_2_RETURN = NVPFM_COMMAND_GET_DEPTH_RANGE_JUSTMENT_2 + 1,

  NVPFM_COMMAND_SET_REPEATED_TEXTURE = NVPFM_COMMAND_GET_DEPTH_RANGE_JUSTMENT_2_RETURN + 1,
  NVPFM_COMMAND_SET_REPEATED_TEXTURE_RETURN = NVPFM_COMMAND_SET_REPEATED_TEXTURE + 1,
  NVPFM_COMMAND_GET_REPEATED_TEXTURE = NVPFM_COMMAND_SET_REPEATED_TEXTURE_RETURN + 1,
  NVPFM_COMMAND_GET_REPEATED_TEXTURE_RETURN = NVPFM_COMMAND_GET_REPEATED_TEXTURE + 1,

  NVPFM_COMMAND_SET_FUSION2 = NVPFM_COMMAND_GET_REPEATED_TEXTURE_RETURN + 1,
  NVPFM_COMMAND_SET_FUSION2_RETURN = NVPFM_COMMAND_SET_FUSION2 + 1,
  NVPFM_COMMAND_GET_FUSION2 = NVPFM_COMMAND_SET_FUSION2_RETURN + 1,
  NVPFM_COMMAND_GET_FUSION2_RETURN = NVPFM_COMMAND_GET_FUSION2 + 1,

  NVPFM_COMMAND_DSP_INFER_DEPTH_PROCESS_PARAM_BASE = NVPFM_COMMAND_DSP_INFER_TOOL_CMD_BASE + 128,
  NVPFM_COMMAND_SET_INFER_DEPTH_PROCESS_PARAM = NVPFM_COMMAND_DSP_INFER_DEPTH_PROCESS_PARAM_BASE,
  NVPFM_COMMAND_SET_INFER_DEPTH_PROCESS_PARAM_RETURN = NVPFM_COMMAND_SET_INFER_DEPTH_PROCESS_PARAM + 1,
  NVPFM_COMMAND_GET_INFER_DEPTH_PROCESS_PARAM = NVPFM_COMMAND_SET_INFER_DEPTH_PROCESS_PARAM_RETURN + 1,
  NVPFM_COMMAND_GET_INFER_DEPTH_PROCESS_PARAM_RETURN = NVPFM_COMMAND_GET_INFER_DEPTH_PROCESS_PARAM + 1

} NVPFM_DSP_POSTPROCESS_SUB_TYPE;
typedef enum {
  IMAGE_YUV_NV12 = 0,
  IMAGE_U8,
  IMAGE_U16,
  IMAGE_H265,
  NVPFM_IMAGE_NUMBER,
  IMAGE_FORMAT_UNKNOWN = 0xff
} NVPFM_IMAGE_FORMAT;

#define MAX_DEPTH_NUMBER (2)
#define MAX_RGB_NUMBER (2)
#define MAX_DEPTH_PIPE_MODE (4)
// stream channel
typedef enum {
  IMAGE_CHANNEL0_ORIGNAL = 0,
  IMAGE_CHANNEL1_ORIGNAL,
  IMAGE_CHANNEL2_ORIGNAL,
  IMAGE_CHANNEL3_ORIGNAL,
  IMAGE_CHANNEL0_CALIBRATED,
  IMAGE_CHANNEL1_CALIBRATED,
  IMAGE_CHANNEL2_CALIBRATED,
  IMAGE_CHANNEL3_CALIBRATED,
  IMAGE_DEPTH0,
  IMAGE_DEPTH1,
  IMAGE_DISPARITY0,
  IMAGE_DISPARITY1,
  IMAGE_TYPE_NUMBER,
  IMAGE_TYPE_UNKNOWN = 0xff
} NVPFM_IMAGE_TYPE;
typedef uint16_t NVPFM_DEVICE_DATASUB_TYPE;
/** NVPFM_IMAGE_SUB_TYPE */
// typedef NVPFM_IMAGE_TYPE NVPFM_IMAGE_SUB_TYPE;

/** NVPFM_IMU_DATASUB_TYPE */
typedef enum {
  NVPFM_IMU_DATA_ACC = 0x00, /**< imu data of accel 0  */
  NVPFM_IMU_DATA_GYO,        /**< imu data of gyro 1  */
  NVPFM_IMU_DATA_MANG,       /**< imu data of magnet 2  */
  NVPFM_IMU_DATA_ALL,        /**< imu data of all 3  */
  NVPFM_IMU_DATA_RES         /**< imu data of res 4  */
} NVPFM_IMU_DATASUB_TYPE;

/** NVPFM_COMMAND_SUB_TYPE */
typedef enum {
  /* 时间同步操作 */
  NVPFM_COMMAND_SET_SYS_TIME_COMMAND = 0x00,
  NVPFM_COMMAND_SET_SYS_TIME_COMMAND_RETURN, // 1
  NVPFM_COMMAND_GET_SYS_TIME_COMMAND,        // 2
  NVPFM_COMMAND_GET_SYS_TIME_COMMAND_RETURN, // 3
  /* 写入efuse key */
  NVPFM_COMMAND_WRITE_EFUSE_KEY,          // 4
  NVPFM_COMMAND_WRITE_EFUSE_KEY_RETURN,   // 5
  NVPFM_COMMAND_READ_EFUSE_STATUS,        // 6
  NVPFM_COMMAND_READ_EFUSE_STATUS_RETURN, // 7
  /* 读写efuse user */
  NVPFM_COMMAND_WRITE_EFUSE_USER,        // 8
  NVPFM_COMMAND_WRITE_EFUSE_USER_RETURN, // 9
  NVPFM_COMMAND_READ_EFUSE_USER,         // 10
  NVPFM_COMMAND_READ_EFUSE_USER_RETURN,  // 11
  /* 运行状态 */
  NVPFM_COMMAND_SET_APP_RUN_CONFIG_COMMAND,        // 12
  NVPFM_COMMAND_SET_APP_RUN_CONFIG_COMMAND_RETURN, // 13
  NVPFM_COMMAND_GET_APP_RUN_CONFIG_COMMAND,        // 14
  NVPFM_COMMAND_GET_APP_RUN_CONFIG_COMMAND_RETURN, // 15
  /* echo test */
  NVPFM_COMMAND_ECHO_TEST_COMMAND,        // 16
  NVPFM_COMMAND_ECHO_TEST_COMMAND_RETURN, // 17
  /* 主动获取设备信息 */
  NVPFM_COMMAND_GET_DEVICE_INFO_COMMAND,        // 18
  NVPFM_COMMAND_GET_DEVICE_INFO_COMMAND_RETURN, // 19

  ////////////////////////////////////////////////////////////////
  /* 设置是否输出图像时间戳跟踪信息 */
  NVPFM_COMMAND_SET_IMAGE_TIMESTAMP_TRACE_COMMAND = (NVPFM_COMMAND_GET_DEVICE_INFO_COMMAND_RETURN + 1),
  NVPFM_COMMAND_SET_IMAGE_TIMESTAMP_TRACE_RETURN = (NVPFM_COMMAND_SET_IMAGE_TIMESTAMP_TRACE_COMMAND + 1),

  /* 计算离线depth */
  NVPFM_COMMAND_OFFLINE_IMAGE_TRANSFER_OVER = (NVPFM_COMMAND_SET_IMAGE_TIMESTAMP_TRACE_RETURN + 1),
  NVPFM_COMMAND_OFFLINE_IMAGE_TRANSFER_OVER_RETURN = (NVPFM_COMMAND_OFFLINE_IMAGE_TRANSFER_OVER + 1),

  /* 设置IP地址 */
  NVPFM_COMMAND_SET_IP_ADDR = (NVPFM_COMMAND_OFFLINE_IMAGE_TRANSFER_OVER_RETURN + 1),
  NVPFM_COMMAND_SET_IP_ADDR_RETURN = (NVPFM_COMMAND_SET_IP_ADDR + 1),

  /* 请求h265 I帧数据 */
  NVPFM_COMMAND_REQUEST_H265_I_FRAME = (NVPFM_COMMAND_SET_IP_ADDR_RETURN + 1),
  NVPFM_COMMAND_REQUEST_H265_I_FRAME_RETURN = (NVPFM_COMMAND_REQUEST_H265_I_FRAME + 1),

  /* 获取是否处于ready mode */
  NVPFM_COMMAND_GET_RUN_AT_READY_MODE = (NVPFM_COMMAND_REQUEST_H265_I_FRAME_RETURN + 1),
  NVPFM_COMMAND_GET_RUN_AT_READY_MODE_RETURN = (NVPFM_COMMAND_GET_RUN_AT_READY_MODE + 1),

  /* 获取power_mode对应的clk配置*/
  NVPFM_COMMAND_GET_CLK_CONFIG_BY_POWER_MODE = (NVPFM_COMMAND_GET_RUN_AT_READY_MODE_RETURN + 1),
  NVPFM_COMMAND_GET_CLK_CONFIG_BY_POWER_MODE_RETURN = (NVPFM_COMMAND_GET_CLK_CONFIG_BY_POWER_MODE + 1),

  NVPFM_COMMAND_RUN_CONFIG_RESERVED_LEN = (0x1000 - 16),
  NVPFM_COMMAND_RUN_CONFIG_RESERVED_START = (NVPFM_COMMAND_GET_CLK_CONFIG_BY_POWER_MODE_RETURN + 1),
  NVPFM_COMMAND_RUN_CONFIG_RESERVED_END = (NVPFM_COMMAND_RUN_CONFIG_RESERVED_START + NVPFM_COMMAND_RUN_CONFIG_RESERVED_LEN - 1),
  /* 投射器状态 */
  NVPFM_COMMAND_SET_PROJECTOR_CONFIG_COMMAND = (NVPFM_COMMAND_RUN_CONFIG_RESERVED_END + 1),
  NVPFM_COMMAND_SET_PROJECTOR_CONFIG_COMMAND_RETURN = (NVPFM_COMMAND_SET_PROJECTOR_CONFIG_COMMAND + 1),
  NVPFM_COMMAND_GET_PROJECTOR_CONFIG_COMMAND = (NVPFM_COMMAND_SET_PROJECTOR_CONFIG_COMMAND_RETURN + 1),
  NVPFM_COMMAND_GET_PROJECTOR_CONFIG_COMMAND_RETURN = (NVPFM_COMMAND_GET_PROJECTOR_CONFIG_COMMAND + 1),

  /* 系统重启 */
  NVPFM_COMMAND_REPORT_REBOOT_COMMAND = (NVPFM_COMMAND_GET_PROJECTOR_CONFIG_COMMAND_RETURN + 1),
  NVPFM_COMMAND_REPORT_REBOOT_COMMAND_RETURN = (NVPFM_COMMAND_REPORT_REBOOT_COMMAND + 1),
  NVPFM_COMMAND_REBOOT_COMMAND = (NVPFM_COMMAND_REPORT_REBOOT_COMMAND_RETURN + 1),
  NVPFM_COMMAND_REBOOT_COMMAND_RETURN = (NVPFM_COMMAND_REBOOT_COMMAND + 1),
  /* standby mode */
  // 对应操作是拉死sensor出图信号
  NVPFM_COMMAND_ENTER_READY_COMMAND = (NVPFM_COMMAND_REBOOT_COMMAND_RETURN + 1),
  NVPFM_COMMAND_ENTER_READY_COMMAND_RETURN = (NVPFM_COMMAND_ENTER_READY_COMMAND + 1),
  NVPFM_COMMAND_EXIT_READY_COMMAND = (NVPFM_COMMAND_ENTER_READY_COMMAND_RETURN + 1),
  NVPFM_COMMAND_EXIT_READY_COMMAND_RETURN = (NVPFM_COMMAND_EXIT_READY_COMMAND + 1),
  /* 保存用户配置-falcon_cfg.json */
  NVPFM_COMMAND_SAVE_CONFIG_COMMAND = (NVPFM_COMMAND_EXIT_READY_COMMAND_RETURN + 1),
  NVPFM_COMMAND_SAVE_CONFIG_COMMAND_RETURN = (NVPFM_COMMAND_SAVE_CONFIG_COMMAND + 1),

  /*********************************************************************************************************************/
  /*********************************************************************************************************************/
  /*********************************************************************************************************************/
  /************************************************参数获取*************************************************************/
  /*********************************************************************************************************************/
  /*********************************************************************************************************************/
  /*********************************************************************************************************************/
  /* 获取通道内参/外参 */
  NVPFM_COMMAND_GET_SENSOR_CHANNEL_INNER_PARAM_COMMAND = (NVPFM_COMMAND_SAVE_CONFIG_COMMAND_RETURN + 1),
  NVPFM_COMMAND_GET_SENSOR_CHANNEL_INNER_PARAM_COMMAND_RETURN = (NVPFM_COMMAND_GET_SENSOR_CHANNEL_INNER_PARAM_COMMAND + 1),
  NVPFM_COMMAND_GET_SENSOR_CHANNEL_LUT_PARAM_COMMAND = (NVPFM_COMMAND_GET_SENSOR_CHANNEL_INNER_PARAM_COMMAND_RETURN + 1),
  NVPFM_COMMAND_GET_SENSOR_CHANNEL_LUT_PARAM_COMMAND_RETURN = (NVPFM_COMMAND_GET_SENSOR_CHANNEL_LUT_PARAM_COMMAND + 1),
  /* 获取depth参数 */
  NVPFM_COMMAND_GET_DEPTH_PARAM_COMMAND = (NVPFM_COMMAND_GET_SENSOR_CHANNEL_LUT_PARAM_COMMAND_RETURN + 1),
  NVPFM_COMMAND_GET_DEPTH_PARAM_COMMAND_RETURN = (NVPFM_COMMAND_GET_DEPTH_PARAM_COMMAND + 1),
  NVPFM_COMMAND_GET_DEPTH_GOLDEN_DIFF_COMMAND = (NVPFM_COMMAND_GET_DEPTH_PARAM_COMMAND_RETURN + 1),
  NVPFM_COMMAND_GET_DEPTH_GOLDEN_DIFF_COMMAND_RETURN = (NVPFM_COMMAND_GET_DEPTH_GOLDEN_DIFF_COMMAND + 1),
  /* 获取通道间参数 */
  NVPFM_COMMAND_GET_CHANNELS_POS_PARAM_COMMAND = (NVPFM_COMMAND_GET_DEPTH_GOLDEN_DIFF_COMMAND_RETURN + 1),
  NVPFM_COMMAND_GET_CHANNELS_POS_PARAM_COMMAND_RETURN = (NVPFM_COMMAND_GET_CHANNELS_POS_PARAM_COMMAND + 1),
  /* 获取IMU参数 */
  NVPFM_COMMAND_GET_IMU_PARAM_COMMAND = (NVPFM_COMMAND_GET_CHANNELS_POS_PARAM_COMMAND_RETURN + 1),
  NVPFM_COMMAND_GET_IMU_PARAM_COMMAND_RETURN = (NVPFM_COMMAND_GET_IMU_PARAM_COMMAND + 1),
  ////////////////////////////////////////////////////////
  /*********************************************************************************************************************/
  /*********************************************************************************************************************/
  /*********************************************************************************************************************/
  /************************************************触发配置*************************************************************/
  /*********************************************************************************************************************/
  /*********************************************************************************************************************/
  /*********************************************************************************************************************/
  NVPFM_COMMAND_SET_TRIGGER_CONFIG_COMMAND = (NVPFM_COMMAND_GET_IMU_PARAM_COMMAND_RETURN + 1),
  NVPFM_COMMAND_SET_TRIGGER_CONFIG_COMMAND_RETURN = (NVPFM_COMMAND_SET_TRIGGER_CONFIG_COMMAND + 1),
  NVPFM_COMMAND_GET_TRIGGER_CONFIG_COMMAND = (NVPFM_COMMAND_SET_TRIGGER_CONFIG_COMMAND_RETURN + 1),
  NVPFM_COMMAND_GET_TRIGGER_CONFIG_COMMAND_RETURN = (NVPFM_COMMAND_GET_TRIGGER_CONFIG_COMMAND + 1),

  /*********************************************************************************************************************/
  /*********************************************************************************************************************/
  /*********************************************************************************************************************/
  /************************************************使能/关闭模块********************************************************/
  /*********************************************************************************************************************/
  /*********************************************************************************************************************/
  /*********************************************************************************************************************/
  NVPFM_COMMAND_SET_SENSOR_STATUS = (NVPFM_COMMAND_GET_TRIGGER_CONFIG_COMMAND_RETURN + 1),
  NVPFM_COMMAND_SET_SENSOR_STATUS_RETURN = (NVPFM_COMMAND_SET_SENSOR_STATUS + 1),
  NVPFM_COMMAND_SET_IMU_STATUS = (NVPFM_COMMAND_SET_SENSOR_STATUS_RETURN + 1),
  NVPFM_COMMAND_SET_IMU_STATUS_RETURN = (NVPFM_COMMAND_SET_IMU_STATUS + 1),
  NVPFM_COMMAND_SET_CAN_STATUS = (NVPFM_COMMAND_SET_IMU_STATUS_RETURN + 1),
  NVPFM_COMMAND_SET_CAN_STATUS_RETURN = (NVPFM_COMMAND_SET_CAN_STATUS + 1),

  /*********************************************************************************************************************/
  /*********************************************************************************************************************/
  /*********************************************************************************************************************/
  /************************************************IM配置***************************************************************/
  /*********************************************************************************************************************/
  /*********************************************************************************************************************/
  /*********************************************************************************************************************/
  NVPFM_COMMAND_SET_IMU_CONFIG_COMMAND = (NVPFM_COMMAND_SET_CAN_STATUS_RETURN + 1),
  NVPFM_COMMAND_SET_IMU_CONFIG_COMMAND_RETURN = (NVPFM_COMMAND_SET_IMU_CONFIG_COMMAND + 1),
  NVPFM_COMMAND_GET_IMU_CONFIG_COMMAND = (NVPFM_COMMAND_SET_IMU_CONFIG_COMMAND_RETURN + 1),
  NVPFM_COMMAND_GET_IMU_CONFIG_COMMAND_RETURN = (NVPFM_COMMAND_GET_IMU_CONFIG_COMMAND + 1),

  /*********************************************************************************************************************/
  /*********************************************************************************************************************/
  /*********************************************************************************************************************/
  /************************************************使能/关闭传输********************************************************/
  /*********************************************************************************************************************/
  /*********************************************************************************************************************/
  /*********************************************************************************************************************/
  NVPFM_COMMAND_SET_TRANSFER_COMMAND = (NVPFM_COMMAND_GET_IMU_CONFIG_COMMAND_RETURN + 1),
  NVPFM_COMMAND_SET_TRANSFER_COMMAND_RETURN = (NVPFM_COMMAND_SET_TRANSFER_COMMAND + 1),
  NVPFM_COMMAND_GET_TRANSFER_COMMAND = (NVPFM_COMMAND_SET_TRANSFER_COMMAND_RETURN + 1),
  NVPFM_COMMAND_GET_TRANSFER_COMMAND_RETURN = (NVPFM_COMMAND_GET_TRANSFER_COMMAND + 1),
  /* 补光灯状态 */
  NVPFM_COMMAND_SET_LED_CONFIG_COMMAND = (NVPFM_COMMAND_GET_TRANSFER_COMMAND_RETURN + 1),
  NVPFM_COMMAND_SET_LED_CONFIG_COMMAND_RETURN = (NVPFM_COMMAND_SET_LED_CONFIG_COMMAND + 1),
  NVPFM_COMMAND_GET_LED_CONFIG_COMMAND = (NVPFM_COMMAND_SET_LED_CONFIG_COMMAND_RETURN + 1),
  NVPFM_COMMAND_GET_LED_CONFIG_COMMAND_RETURN = (NVPFM_COMMAND_GET_LED_CONFIG_COMMAND + 1),
  // user config
  // save get get_all delete load_user
  NVPFM_COMMAND_SAVE_USER_CUSTOM_CONFIG = (NVPFM_COMMAND_GET_LED_CONFIG_COMMAND_RETURN + 1),
  NVPFM_COMMAND_SAVE_USER_CUSTOM_CONFIG_RETURN = (NVPFM_COMMAND_SAVE_USER_CUSTOM_CONFIG + 1),
  NVPFM_COMMAND_GET_USER_CUSTOM_CONFIG = (NVPFM_COMMAND_SAVE_USER_CUSTOM_CONFIG_RETURN + 1),
  NVPFM_COMMAND_GET_USER_CUSTOM_CONFIG_RETURN = (NVPFM_COMMAND_GET_USER_CUSTOM_CONFIG + 1),
  NVPFM_COMMAND_GET_USER_ALL_CUSTOM_CONFIG_NAME = (NVPFM_COMMAND_GET_USER_CUSTOM_CONFIG_RETURN + 1),
  NVPFM_COMMAND_GET_USER_ALL_CUSTOM_CONFIG_NAME_RETURN = (NVPFM_COMMAND_GET_USER_ALL_CUSTOM_CONFIG_NAME + 1),
  NVPFM_COMMAND_DELETE_USER_CUSTOM_CONFIG = (NVPFM_COMMAND_GET_USER_ALL_CUSTOM_CONFIG_NAME_RETURN + 1),
  NVPFM_COMMAND_DELETE_USER_CUSTOM_CONFIG_RETURN = (NVPFM_COMMAND_DELETE_USER_CUSTOM_CONFIG + 1),
  NVPFM_COMMAND_LOAD_USER_CUSTOM_CONFIG = (NVPFM_COMMAND_DELETE_USER_CUSTOM_CONFIG_RETURN + 1),
  NVPFM_COMMAND_LOAD_USER_CUSTOM_CONFIG_RETURN = (NVPFM_COMMAND_LOAD_USER_CUSTOM_CONFIG + 1),
  NVPFM_COMMAND_SET_DEPTH_CALCULATE = (NVPFM_COMMAND_LOAD_USER_CUSTOM_CONFIG_RETURN + 1),
  NVPFM_COMMAND_SET_DEPTH_CALCULATE_RETURN = (NVPFM_COMMAND_SET_DEPTH_CALCULATE + 1),
  NVPFM_COMMAND_GET_DEPTH_CALCULATE = (NVPFM_COMMAND_SET_DEPTH_CALCULATE_RETURN + 1),
  NVPFM_COMMAND_GET_DEPTH_CALCULATE_RETURN = (NVPFM_COMMAND_GET_DEPTH_CALCULATE + 1),
} NVPFM_COMMAND_SUB_TYPE;

/** NVPFM_UPGRADE_SUB_TYPE */
typedef enum {
  NVPFM_COMMAND_USB_UPGRADE_USER_FILE = 0x00,              /**< upgrade user file 0  */
  NVPFM_COMMAND_USB_UPGRADE_USER_FILE_RETURN,              /**< upgrade user file return data type 1  */
  NVPFM_COMMAND_USB_UPGRADE_USER_CONFIG,                   /**< upgrade user config file 2  */
  NVPFM_COMMAND_USB_UPGRADE_USER_CONFIG_RETURN,            /**< upgrade user config  return data type 3  */
  NVPFM_COMMAND_USB_UPGRADE_NEXTVPU_SYSTEM,                /**< upgrade system 4  */
  NVPFM_COMMAND_USB_UPGRADE_NEXTVPU_SYSTEM_RETURN,         /**< upgrade system return data type 5  */
  NVPFM_COMMAND_USB_UPGRADE_NEXTVPU_CONFIG,                /**< upgrade config 6  */
  NVPFM_COMMAND_USB_UPGRADE_NEXTVPU_CONFIG_RETURN,         /**< upgrade config return data type 7  */
  NVPFM_COMMAND_USB_UPGRADE_NEXTVPU_DIFFER_PACKAGE,        /**< upgrade differ file type 8  */
  NVPFM_COMMAND_USB_UPGRADE_NEXTVPU_DIFFER_PACKAGE_RETURN, /**< upgrade differ file return data type 9 */
} NVPFM_UPGRADE_SUB_TYPE;

/** NVPFM_DEVICE_DATASUB_TYPE */
/*typedef enum
{
  NVPFM_DEVICE_DATA_ALL = 0x00,
} NVPFM_DEVICE_DATASUB_TYPE;*/

/** NVPFM_LOG_DATA_SUB_TYPE */
typedef enum {
  NVPFM_LOG_ALL = 0x00, /**< log data type 0  */
} NVPFM_LOG_DATA_SUB_TYPE;

/** NVPFM_CNN_DATASUB_TYPE */
typedef enum {
  NVPFM_CNN_DATA_ALL = 0x00, /**< cnn data type 0  */
} NVPFM_CNN_DATASUB_TYPE;

/** NVPFM_USER_DATA_SUB_TYPE */
typedef enum {
  NVPFM_USER_DATA_TO_PC = 0X00, /**< user defined data from camera to pc 0  */
  NVPFM_USER_DATA_TO_BOARD      /**< user defined data from pc to camera 1  */
} NVPFM_USER_DATA_SUB_TYPE;

/** NVPFM_CV_DATA_SUB_TYPE */
typedef enum {
  NVPFM_CV_GOOD_FEATURE, /**< good feature data type:0  */
  NVPFM_CV_LK,
} NVPFM_CV_DATA_SUB_TYPE;

/** NVPFM_DOWNLOAD_SUB_TYPE */
typedef enum {
  NVPFM_COMMAND_USB_DOWNLOAD_USER_FILE = 0x00, /**< download user file data type:0 */
  NVPFM_COMMAND_USB_DOWNLOAD_USER_FILE_RETURN  /**< download user file return data type:1 */
} NVPFM_DOWNLOAD_SUB_TYPE;

/** RGB_AWB_MODE */
typedef enum {
  AWB_AUTO = 0x35,     /**< auto white balance type:0 */
  AWB_MANUAL,          /**< manual white balance type:1 */
  AWB_DAY_LIGHT,       /**< daylight type:2 */
  AWB_CLOUDY,          /**< cloudy type:3 */
  AWB_INCANDESCENT,    /**< incandescent type:4 */
  AWB_FLOURESCENT,     /**< flourescent type:5 */
  AWB_TWILIGHT,        /**< twilight type:6 */
  AWB_SHADE,           /**< shade type:7 */
  AWB_WARM_FLOURESCENT /**< warm flourescent type:8 */
} RGB_AWB_MODE;

typedef enum {
  NVPFM_IMAGE_SET_SENSOR_CONFIG_COMMAND = 0x0000,
  NVPFM_IMAGE_SET_SENSOR_CONFIG_COMMAND_RETURN = (NVPFM_IMAGE_SET_SENSOR_CONFIG_COMMAND + 1),
  NVPFM_IMAGE_GET_SENSOR_CONFIG_COMMAND = (NVPFM_IMAGE_SET_SENSOR_CONFIG_COMMAND_RETURN + 1),
  NVPFM_IMAGE_GET_SENSOR_CONFIG_COMMAND_RETURN = (NVPFM_IMAGE_GET_SENSOR_CONFIG_COMMAND + 1),

  NVPFM_IMAGE_SET_SENSOR_EXPOSURE_COMMAND = (NVPFM_IMAGE_GET_SENSOR_CONFIG_COMMAND_RETURN + 1),
  NVPFM_IMAGE_SET_SENSOR_EXPOSURE_COMMAND_RETURN = (NVPFM_IMAGE_SET_SENSOR_EXPOSURE_COMMAND + 1),
  NVPFM_IMAGE_GET_SENSOR_EXPOSURE_COMMAND = (NVPFM_IMAGE_SET_SENSOR_EXPOSURE_COMMAND_RETURN + 1),
  NVPFM_IMAGE_GET_SENSOR_EXPOSURE_COMMAND_RETURN = (NVPFM_IMAGE_GET_SENSOR_EXPOSURE_COMMAND + 1),
} IMG_PROCESS_E;
typedef enum {
  IMAGE_1280_800 = 0,
  IMAGE_1280_720,
  IMAGE_640_480,
  IMAGE_640_400,
  IMAGE_320_200,
  IMAGE_640_360,
  IMAGE_320_240,
  IMAGE_960_600,
  IMAGE_480_300,
  IMAGE_1600_1200,
  IMAGE_1280_1080,
  IMAGE_1280_960,
  IMAGE_800_600,
  IMAGE_848_480,
  IMAGE_768_480,
  IMAGE_1280_480,
  IMAGE_1920_1080,
  IMAGE_960_1280,
  IMAGE_480_640,
  IMAGE_960_720,
  IMAGE_640_800,
  IMAGE_1280_400,
  IMAGE_640_200,
  IMAGE_720_1280,
  IMAGE_1024_768,
  IMAGE_512_384,
  IMAGE_1024_480,
  IMAGE_512_240,
  IMAGE_896_672,
  IMAGE_768_576,
  IMAGE_864_1152,
  IMAGE_1152_720,
  IMAGE_1152_400,
  IMAGE_1152_864,
  IMAGE_1152_480,
  IMAGE_UNKNOWN,
  IMAGE_SIZE_NUMBER = 0xFFFF
} NVPFM_IMAGE_SIZE;
#define MAX_SENSOR_NUMBER (4)
/*********************************************************************************************************************/
/*********************************************************************************************************************/
/*********************************************************************************************************************/
/************************************************SENSOR_CONFIG********************************************************/
/*********************************************************************************************************************/
/*********************************************************************************************************************/
/*********************************************************************************************************************/
// for NVPFM_IMAGE_SET_SENSOR_CONFIG_COMMAND
typedef struct
{
  NVPFM_IMAGE_SIZE frame_size[MAX_SENSOR_NUMBER];
  NVPFM_IMAGE_SIZE isp_frame_size[MAX_SENSOR_NUMBER];
  int fps[MAX_SENSOR_NUMBER];
  NVPFM_IMAGE_FORMAT format[MAX_SENSOR_NUMBER];
  int compress_type[MAX_SENSOR_NUMBER]; // 0-无压缩   2-jpeg.
  int reserved[60];
} s_nvpfm_app_sensor_config;
typedef enum {
  CHANNEL0 = 0, // left ir
  CHANNEL1,     // right ir
  CHANNEL2,     // rgb
  CHANNEL3,
  SENSOR_CHANNEL_UNKNOWN
} E_NVPFM_SENSOR_CHANNEL;
// for NVPFM_CV_GOOD_FEATURE
typedef struct
{
  float x;
  float y;
  float quality;
} s_nvpfm_cv_good_feature;
typedef struct
{
  E_NVPFM_SENSOR_CHANNEL channel;
  int calibrated;
  int frame_id;
  NVP_U64 timestamp;
  int good_feature_number; // 特征点数量，最大400
  s_nvpfm_cv_good_feature good_feature[400];
} s_nvpfm_cv_data_good_feature;

// #define NVPFM_CV_LK                    0x01
typedef struct
{
  float start_x;
  float start_y;
  float end_x;
  float end_y;
} s_nvpfm_cv_LK;
typedef struct
{
  E_NVPFM_SENSOR_CHANNEL channel;
  int calibrated;
  int frame_id;
  NVP_U64 timestamp;
  int LK_number; // 光流数量，最大400
  s_nvpfm_cv_LK LK[400];
} s_nvpfm_cv_data_LK;
// for NVPFM_COMMAND_SET_DEPTH_CALCULATE
typedef struct
{
  E_NVPFM_DEPTH_CHANNEL channel;
  int enable;
} s_nvpfm_set_depth_calculate;
// for NVPFM_COMMAND_SET_DEPTH_CALCULATE_RETURN
typedef struct
{
  int ret; // 0-ok else:failed
  E_NVPFM_DEPTH_CHANNEL channel;
} s_nvpfm_set_depth_calculate_ret;
// for FEYNMAN_COMMAND_GET_DEPTH_CALCULATE
typedef struct
{
  E_NVPFM_DEPTH_CHANNEL channel;
} s_nvpfm_get_depth_calculate;
// for FEYNMAN_COMMAND_GET_DEPTH_CALCULATE_RETURN
typedef struct
{
  int ret; // 0-ok else:failed
  E_NVPFM_DEPTH_CHANNEL channel;
  int enable;
} s_nvpfm_get_depth_calculate_ret;

// for NVPFM_IMAGE_GET_SENSOR_CONFIG_COMMAND
typedef struct
{
  int ret;
  s_nvpfm_app_sensor_config config;
} s_nvpfm_get_sensor_config_ret;

/*********************************************************************************************************************/
/*********************************************************************************************************************/
/*********************************************************************************************************************/
/************************************************SENSOR_EXPOSURE******************************************************/
/*********************************************************************************************************************/
/*********************************************************************************************************************/
/*********************************************************************************************************************/
// 无特殊说明时，set命令的返回定义
typedef struct
{
  int ret; // 0:ok -1:failed
} s_nvpfm_image_set_ret;

typedef struct
{
  int32_t exposure_mode; // 0-自动曝光  1-手动曝光， -1表示不操作
  int32_t exposure_time; // us, 大于等于0时有效，小于0表示不操作曝光时间
  int32_t digital_gain;  // 大于等于0时有效，小于0表示不操作数字增益
  /* 以下仅对自动曝光有效 */
  int32_t AE_compensation_id; // 128 一般在 96-160之间
  int32_t AE_tail_weight;     // 30 范围0-1023  一般在0-100
  int32_t max_exposure_time;
  int32_t max_again;
  int32_t reserved[32];
} s_nvpfm_app_sensor_exposure_config;
// for NVPFM_IMAGE_SET_SENSOR_EXPOSURE_COMMAND
typedef struct
{
  s_nvpfm_app_sensor_exposure_config config;
  E_NVPFM_SENSOR_CHANNEL channel;
} s_nvpfm_set_sensor_exposure;

// for NVPFM_IMAGE_GET_SENSOR_EXPOSURE_COMMAND
typedef struct
{
  E_NVPFM_SENSOR_CHANNEL channel;
} s_nvpfm_get_sensor_exposure;
// for NVPFM_IMAGE_GET_SENSOR_EXPOSURE_COMMAND_RETURN
typedef struct
{
  int ret;
  s_nvpfm_app_sensor_exposure_config exposure;
} s_nvpfm_get_sensor_exposure_ret;

// 无特殊说明时，set命令的返回定义
typedef struct
{
  int ret; // 0:ok -1:failed
} s_nvpfm_dsp_set_ret;

/*********************************************************************************************************************/
/*********************************************************************************************************************/
/*********************************************************************************************************************/
/************************************************depth静态配置********************************************************/
/*********************************************************************************************************************/
/*********************************************************************************************************************/
/*********************************************************************************************************************/

// for NVPFM_DSP_SET_STATIC_CONFIG_COMMAND
typedef struct
{
  int dsp_depth_mode;    // 0,1,2,3
  int dsp_depth_denoise; // 0, 1
  int dsp_depth_fusion;  // 0, 1, 2
  int dsp_depth_zoom;    // 0, 1
  int dsp_depth_stitch;  // 0, 1

  int reserved[64];
} s_nvpfm_app_dsp_process_static_config;
// for NVPFM_DSP_SET_STATIC_CONFIG_COMMAND
typedef struct
{
  E_NVPFM_DEPTH_CHANNEL channel; // depth 通道号
  s_nvpfm_app_dsp_process_static_config config;
} s_nvpfm_set_dsp_static_config;

// for NVPFM_DSP_GET_STATIC_CONFIG_COMMAND
typedef struct
{
  E_NVPFM_DEPTH_CHANNEL channel; // depth 通道号
} s_nvpfm_get_dsp_static_config;

// for NVPFM_DSP_GET_STATIC_CONFIG_COMMAND_RETURN
typedef struct
{
  int ret;
  s_nvpfm_app_dsp_process_static_config config;
} s_nvpfm_get_dsp_static_config_ret;

/*********************************************************************************************************************/
/*********************************************************************************************************************/
/*********************************************************************************************************************/
/************************************************depth动态配置********************************************************/
/*********************************************************************************************************************/
/*********************************************************************************************************************/
/*********************************************************************************************************************/
// for NVPFM_COMMAND_SET_DEPTH_RESOLUTION_AFTER_RESIZE_COMMAND & NVPFM_COMMAND_GET_DEPTH_RESOLUTION_AFTER_RESIZE_RETURN
typedef struct
{
  int enable; // 0-disable 1-enable
  NVPFM_IMAGE_SIZE frame_size;
} s_nvpfm_resize_infor;
// for NVPFM_COMMAND_SET_GOLDEN_DIFF_PARAM_COMMAND & NVPFM_COMMAND_GET_GOLDEN_DIFF_PARAM_RETURN
typedef struct
{
  int enable;
} s_nvpfm_golden_diff_info;

// for NVPFM_COMMAND_SET_CONFIDENCE_PARAM & NVPFM_COMMAND_GET_CONFIDENCE_PARAM_RETURN
typedef struct
{
  unsigned int enable;
  float sigma;
} s_nvpfm_confidence;
// for NVPFM_COMMAND_SET_CONFIDENCE_PARAM
typedef struct
{
  E_NVPFM_DEPTH_CHANNEL channel; // depth 通道号
  s_nvpfm_confidence info;
} s_nvpfm_set_confidence;
// for NVPFM_COMMAND_SET_LIGHT_FILTER_PARAM & NVPFM_COMMAND_GET_LIGHT_FILTER_PARAM_RETURN
typedef struct
{
  unsigned int enable;
  float sigma;
  int pixel_threshold;
  int erode_size;
  int kernel_H;
  int kernel_W;
} s_nvpfm_light_filter;

// for NVPFM_COMMAND_SET_LIGHT_FILTER_PARAM
typedef struct
{
  E_NVPFM_DEPTH_CHANNEL channel; // depth 通道号
  s_nvpfm_light_filter info;
} s_nvpfm_set_light_filter;

// for NVPFM_COMMAND_GET_GOOD_FEATURE_PARAM_RETURN
typedef struct
{
  int enable;
  int maxCorners;
  float qualityLevel;
  float minDistance; // 大于等于1
} s_nvpfm_good_feature;
// for NVPFM_COMMAND_SET_GOOD_FEATURE_PARAM
typedef struct
{
  E_NVPFM_DEPTH_CHANNEL channel; // depth 通道号
  s_nvpfm_good_feature info;
} s_nvpfm_set_good_feature;

// for NVPFM_COMMAND_GET_LK_PARAM_RETURN
typedef struct
{
  int enable;
  int win_width;
  int win_height;
  int point_limt;
  int maxCorners;
  float qualityLevel;
  float minDistance;
} s_nvpfm_lk;
// for NVPFM_COMMAND_SET_LK_PARAM
typedef struct
{
  E_NVPFM_DEPTH_CHANNEL channel; // depth 通道号
  s_nvpfm_lk info;
} s_nvpfm_set_lk;
// for NVPFM_COMMAND_SET_BAD_FILTER_PARAM & NVPFM_COMMAND_GET_BAD_FILTER_PARAM_RETURN
typedef struct
{
  int enable;
  int kernel;
} s_nvpfm_bad_filter;
// for NVPFM_COMMAND_SET_BAD_FILTER_PARAM
typedef struct
{
  E_NVPFM_DEPTH_CHANNEL channel; // depth 通道号
  s_nvpfm_bad_filter info;
} s_nvpfm_set_bad_filter;
// for NVPFM_COMMAND_SET_HIGH_PRECISION_PARAM & NVPFM_COMMAND_GET_HIGH_PRECISION_PARAM_RETURN
typedef struct
{
  int enable;
} s_nvpfm_high_precision;
// for NVPFM_COMMAND_SET_HIGH_PRECISION_PARAM
typedef struct
{
  E_NVPFM_DEPTH_CHANNEL channel; // depth 通道号
  s_nvpfm_high_precision info;
} s_nvpfm_set_high_precision;
// NVPFM_COMMAND_SET_REPEATED_TEXTURE_PARAM & NVPFM_COMMAND_GET_REPEATED_TEXTURE_PARAM_RETURN
typedef struct
{
  int enable;
  int winSize;     // 5
  float threshold; // 0~1
} s_nvpfm_repeated_texture_filter;

// for NVPFM_COMMAND_SET_REPEATED_TEXTURE_PARAM
typedef struct
{
  E_NVPFM_DEPTH_CHANNEL channel; // depth 通道号
  s_nvpfm_repeated_texture_filter info;
} s_nvpfm_set_repeated_texture_filter;

// for NVPFM_COMMAND_SET_SPATIAL_FILTER_PARAM & NVPFM_COMMAND_GET_SPATIAL_FILTER_PARAM_RETURN
typedef struct
{
  int enable;
  int winSize;         // 15
  float sigmaColor;    // 5
  float sigmaSpace;    // 10
  float dispThreshold; // 6
  int iterationNums;   // 4
  float distThresh;    // 64.0
} s_nvpfm_spatial_filter;
// for NVPFM_COMMAND_SET_SPATIAL_FILTER_PARAM
typedef struct
{
  E_NVPFM_DEPTH_CHANNEL channel; // depth 通道号
  s_nvpfm_spatial_filter info;
} s_nvpfm_set_spatial_filter;
// for NVPFM_COMMAND_SET_SMEAR_FILTER_PARAM & NVPFM_COMMAND_GET_SMEAR_FILTER_PARAM_RETURN
typedef struct
{
  int enable;
  int winSize;         // 7
  float dispThreshold; // 0.86
} s_nvpfm_smear_filter;
// for NVPFM_COMMAND_SET_SMEAR_FILTER_PARAM
typedef struct
{
  E_NVPFM_DEPTH_CHANNEL channel; // depth 通道号
  s_nvpfm_smear_filter info;
} s_nvpfm_set_smear_filter;

typedef struct {
  int enable;
  int radius;      // 1;
  float threshold; // 0.000012f;
  int p;           // 2;
} s_nvpfm_smear_filter_cfg;

typedef struct {
  int enable;
  double threshold; // 单位：mm
} s_nvpfm_clip_depht_cfg;

typedef struct
{
  E_NVPFM_DEPTH_CHANNEL channel; // depth 通道号
} s_nvpfm_get_dynamic_config;
// NVPFM_COMMAND_GET_SPECKLE_FILTER_PARAM_RETURN
typedef struct
{
  int enable;
} s_nvpfm_speckle_filter;
// for NVPFM_COMMAND_SET_SPECKLE_FILTER_PARAM
typedef struct
{
  E_NVPFM_DEPTH_CHANNEL channel; // depth 通道号
  s_nvpfm_speckle_filter info;
} s_nvpfm_set_speckle_filter;
// for NVPFM_COMMAND_SET_TEMPORAL_FILTER_PARAM & NVPFM_COMMAND_GET_TEMPORAL_FILTER_PARAM_RETURN
typedef struct
{
  int enable;
} s_nvpfm_temporal_filter;
// for NVPFM_COMMAND_SET_TEMPORAL_FILTER_PARAM
typedef struct
{
  E_NVPFM_DEPTH_CHANNEL channel; // depth 通道号
  s_nvpfm_temporal_filter info;
} s_nvpfm_set_temporal_filter;
// for NVPFM_COMMAND_SET_AGG_PROCESS_PARAM & NVPFM_COMMAND_GET_AGG_PROCESS_PARAM_RETURN
typedef struct
{
  unsigned int enable;
} NVP_FEIMAN_agg_process_ATTR_S;
// for NVPFM_COMMAND_SET_TEXT_LIGHT_FILTER_PARAM & NVPFM_COMMAND_GET_TEXT_LIGHT_FILTER_PARAM_RETURN
typedef struct
{
  int enable;
  int wsize_w;    // 21
  int wsize_h;    // 3
  float gray_thr; // 5
  float grad_thr; // 10
  int dilate_w;   // 11
  int dilate_h;   // 11
  int use_mode;   // 0
} s_nvpfm_textlight_filter;
// for NVPFM_COMMAND_SET_DEPTH_HIGH_LIGHT_PROCESS_PARAM & NVPFM_COMMAND_GET_DEPTH_HIGH_LIGHT_PROCESS_PARAM_RETURN
typedef struct
{
  int enable;
} s_nvpfm_depth_high_light;
// for NVPFM_COMMAND_SET_DEPTH_HIGH_LIGHT_PROCESS_PARAM
typedef struct
{
  E_NVPFM_DEPTH_CHANNEL channel; // depth 通道号
  s_nvpfm_depth_high_light info;
} s_nvpfm_set_depth_high_light;

// for NVPFM_COMMAND_SET_LIGHT_STRIP_PROCESS_PARAM & NVPFM_COMMAND_GET_LIGHT_STRIP_PROCESS_PARAM_RETURN
typedef struct
{
  int enable;
} s_nvpfm_depth_light_strip;

// for NVPFM_COMMAND_SET_DEPTH_RIGHT_UP_DOWN_PROCESS_PARAM & NVPFM_COMMAND_GET_DEPTH_RIGHT_UP_DOWN_PROCESS_PARAM_RETURN
typedef struct
{
  int enable;
  float param;
} s_nvpfm_depth_right_up_down_info;

/*************************************************************************************************************************************************************************************/
/*************************************************************************************************************************************************************************************/
/*************************************************************************************************************************************************************************************/
/************************************************infer tool对应命令*****************************************************************************************************************************/
/*************************************************************************************************************************************************************************************/
/*************************************************************************************************************************************************************************************/
/*************************************************************************************************************************************************************************************/

/***********************#########################################################################################**********************************/
// for NVPFM_COMMAND_GET_HIGH_LUMA_REMOVAL_RETURN
typedef struct {
  int32_t HighLumaRemovalThr;        // unit:px, default: 210, range:[0,255]
  int32_t HighLumaRemovalDepthLimit; // unit:mm, default: 2000, range:[0,4000]
} s_nvpfm_highluma_removal_param;
typedef struct {
  int enable;
  s_nvpfm_highluma_removal_param params;
} s_nvpfm_highluma_removal;

// for NVPFM_COMMAND_SET_HIGH_LUMA_REMOVAL
typedef struct {
  E_NVPFM_DEPTH_CHANNEL channel; // depth 通道号
  s_nvpfm_highluma_removal info;
} s_nvpfm_set_highluma_removal;

/***********************#########################################################################################**********************************/
// for NVPFM_COMMAND_GET_HIGHPRESION_RETURN
typedef struct {
  int enable;
} s_nvpfm_highpresion;

// for NVPFM_COMMAND_SET_HIGHPRESION
typedef struct {
  E_NVPFM_DEPTH_CHANNEL channel; // depth 通道号
  s_nvpfm_highpresion info;
} s_nvpfm_set_highpresion_info;

/***********************#########################################################################################**********************************/
// for NVPFM_COMMAND_GET_OUTLIERS_REMOVAL_RETURN
typedef struct {
  int32_t OutliersSizeThr; // unit:px, default: 100, range:[0,6000]
} s_outliers_removal_param;
typedef struct {
  s_outliers_removal_param params;
} s_nvpfm_outliers_removal;

// for NVPFM_COMMAND_SET_OUTLIERS_REMOVAL
typedef struct {
  E_NVPFM_DEPTH_CHANNEL channel; // depth 通道号
  s_nvpfm_outliers_removal info;
} s_nvpfm_set_outliers_removal;

/***********************#########################################################################################**********************************/
// for NVPFM_COMMAND_GET_DEPTH_MAP_EXPANSION_RETURN
typedef struct {
  int ThinObjectDiationFactor; // default: 3, range:[0,10]
} s_depthmap_expansion_param;
typedef struct {
  int enable;
  s_depthmap_expansion_param params;
} s_nvpfm_depth_map_expansion;

// for NVPFM_COMMAND_SET_DEPTH_MAP_EXPANSION
typedef struct {
  E_NVPFM_DEPTH_CHANNEL channel; // depth 通道号
  s_nvpfm_depth_map_expansion info;
} s_nvpfm_set_depth_map_expansion;

/***********************#########################################################################################**********************************/
// for NVPFM_COMMAND_GET_LOWTEXTURE_REMOVAL_RETURN
typedef struct {
  float LowTextureThr;                 // default: 2.55, range:[0,255]
  float ReflectiveStrengthThr;         // unit:px, default: 40, range:[0,255]
  float LowTextureRemovalDisparityThr; // unit:px, default: 12.2, range:[0,255]
} s_lowtexture_removal_param;
typedef struct {
  int enable;
  s_lowtexture_removal_param params;
} s_nvpfm_lowtexture_removal;

// for NVPFM_COMMAND_SET_LOWTEXTURE_REMOVAL
typedef struct {
  E_NVPFM_DEPTH_CHANNEL channel; // depth 通道号
  s_nvpfm_lowtexture_removal info;
} s_nvpfm_set_lowtexture_removal;

/***********************#########################################################################################**********************************/
// for NVPFM_COMMAND_GET_AMBIGUITY_REMOVAL_RETURN
typedef struct {
  int AmbiguityConnectedComponentSizeThr; // unit:px, default: 2000, range:[0,6000]
  float AmbiguityRemovalDisparityThr;     // unit:px, default: 10, range:[0,64]
} s_ambiguity_removal_param;
typedef struct {
  int enable;
  s_ambiguity_removal_param params;
} s_nvpfm_ambiguity_removal;

// for NVPFM_COMMAND_SET_AMBIGUITY_REMOVAL
typedef struct {
  E_NVPFM_DEPTH_CHANNEL channel; // depth 通道号
  s_nvpfm_ambiguity_removal info;
} s_nvpfm_set_ambiguity_removal;

/***********************#########################################################################################**********************************/
// for NVPFM_COMMAND_GET_STEREOCALI_CORRECTION_RETURN
typedef struct {
  float RightImgUpDownShiftPixels; // unit:px, default: 0, range:[-10, 10]
} s_stereocalibration_correction_param;
typedef struct {
  int enable;
  s_stereocalibration_correction_param params;
} s_nvpfm_stereo_calibration_correction;

// for NVPFM_COMMAND_SET_STEREOCALI_CORRECTION
typedef struct {
  E_NVPFM_DEPTH_CHANNEL channel; // depth 通道号
  s_nvpfm_stereo_calibration_correction info;
} s_nvpfm_set_stereo_calibration_correction;

/***********************#########################################################################################**********************************/
// for NVPFM_COMMAND_GET_DEPTH_RANGE_JUSTMENT_1_RETURN
typedef struct {
  float TreatTheDistanceAsInfinite; // unit:mm, default: 120
} s_depthrange_adjustment_param;
typedef struct {
  int enable;
  s_depthrange_adjustment_param params; // unit:mm, default: 3000,
} s_nvpfm_depth_range_adjustment1;

// for NVPFM_COMMAND_SET_DEPTH_RANGE_JUSTMENT_1
typedef struct {
  E_NVPFM_DEPTH_CHANNEL channel; // depth 通道号
  s_nvpfm_depth_range_adjustment1 info;
} s_nvpfm_set_depth_range_adjustment1;

/***********************#########################################################################################**********************************/
// for NVPFM_COMMAND_GET_DEPTH_RANGE_JUSTMENT_2_RETURN
typedef struct {
  int enable;
  s_depthrange_adjustment_param params;
} s_nvpfm_depth_range_adjustment2;

// for NVPFM_COMMAND_SET_DEPTH_RANGE_JUSTMENT_2
typedef struct {
  E_NVPFM_DEPTH_CHANNEL channel; // depth 通道号
  s_nvpfm_depth_range_adjustment2 info;
} s_nvpfm_set_depth_range_adjustment2;

/***********************#########################################################################################**********************************/
// for NVPFM_COMMAND_GET_REPEATED_TEXTURE_RETURN
typedef struct {
  int enable;
} s_nvpfm_repeated_texture;

// for NVPFM_COMMAND_SET_REPEATED_TEXTURE
typedef struct {
  E_NVPFM_DEPTH_CHANNEL channel; // depth 通道号
  s_nvpfm_repeated_texture info;
} s_nvpfm_set_repeated_texture;

/***********************#########################################################################################**********************************/
// for NVPFM_COMMAND_GET_FUSION2_RETURN
typedef struct {
  int enable;
} s_nvpfm_fusion2;

// for NVPFM_COMMAND_SET_FUSION2
typedef struct {
  E_NVPFM_DEPTH_CHANNEL channel; // depth 通道号
  s_nvpfm_fusion2 info;
} s_nvpfm_set_fusion2;

typedef struct {
  int enable;
} s_nvpfm_fusion_1;

typedef struct {
  int mode;
} s_nvpfm_depthpipe_mode;

typedef struct
{
  int enable;
  s_depthrange_adjustment_param params;
} s_falcon_depth_range_adjustment3;

typedef struct
{
  int enable;
} s_falcon_small_disp_mask;

// for NVPFM_COMMAND_GET_INFER_DEPTH_PROCESS_PARAM_RETURN
typedef struct {
  s_nvpfm_highluma_removal highluma_removal;
  s_nvpfm_highpresion highpresion;
  s_nvpfm_outliers_removal outliers_removal;
  s_nvpfm_depth_map_expansion depth_map_expansion;
  s_nvpfm_lowtexture_removal lowtexture_removal;
  s_nvpfm_ambiguity_removal ambiguity_removal;
  s_nvpfm_stereo_calibration_correction stereo_calibration_correction;
  s_nvpfm_depth_range_adjustment1 range_adjustment1;
  s_nvpfm_depth_range_adjustment2 range_adjustment2;
  s_nvpfm_repeated_texture repeated_texture;
  s_nvpfm_fusion2 fusion2;
  s_nvpfm_fusion_1 fusion1;
  s_nvpfm_depthpipe_mode dp_mode_1_1;
  s_nvpfm_depthpipe_mode dp_mode_1_2;
  s_nvpfm_depthpipe_mode dp_mode_2_1;
  s_nvpfm_depthpipe_mode dp_mode_2_2;
  s_falcon_depth_range_adjustment3 range_adjustment3;
  s_falcon_small_disp_mask small_disp_mask;
  char reserved[2016];
} s_nvpfm_depth_infer_process_param;

// for NVPFM_COMMAND_SET_INFER_DEPTH_PROCESS_PARAM
typedef struct {
  E_NVPFM_DEPTH_CHANNEL channel;          // depth 通道号
  s_nvpfm_depth_infer_process_param info; // 上位机下发的配置
  NVP_U64 changeflag;                     // 本地设置中上位机修改了哪些后处理，每个bit对应一个后处理，bit位置1表示该后处理这次有修改，bit置0表示该后处理这次没有修改，各bit与后处理对应关系如下：
  /*
   * bit0: E_HIGHLUMA_REMOVAL              bit1: E_HIGHPRESION               bit2: E_OUTLIERS_REMOVAL                      bit3:E_DEPTH_MAP_EXPANSION
   * bit4: E_LOWTEXTURE_REMOVAL            bit5: E_AMBIGUITY_REMOVAL         bit6: E_STEREO_CALIBRATION_CORRECTION         bit7: E_DEPTHRANGE_ADJUSTMENT_1
   * bit8: E_DEPTHRANGE_ADJUSTMENT_2       bit9:E_REPEATED_TEXTURE           bit10: E_FUSION2                              bit11:fusion_1
   * bit12:dp_mode_1_1                     bit13:dp_mode_1_2                 bit14:dp_mode_2_1                             bit15:dp_mode_2_2
   * bit16:E_DEPTHRANGE_ADJUSTMENT_3      bit17:E_SET_SMALL_DISP_MASK
   */
} s_nvpfm_set_depth_infer_process_param;

// for and NVPFM_COMMAND_SET_INFER_DEPTH_PROCESS_PARAM_RETURN
typedef struct {
  s_nvpfm_dsp_set_ret ret;
  s_nvpfm_depth_infer_process_param info; // 若ret.ret为0则info为相机根据上位机下发的配置进行修正(如果上位机配置的某些选项不合规的话相机会修正)后返回的实际配置，若ret.ret非0则忽略info的内容
} s_nvpfm_set_depth_infer_process_param_return;

// for NVPFM_COMMAND_WRITE_EFUSE_USER & NVPFM_COMMAND_READ_EFUSE_USER_RETURN
typedef struct
{
  char user[24]; // 有效长度为24
} s_nvpfm_efuse_user;

// for NVPFM_COMMAND_WRITE_EFUSE_USER_RETURN
typedef struct
{
  int status; //-1：user数据已写入    0：写入成功
} s_nvpfm_efuse_user_ret;

typedef struct
{
  uint32_t led_current_value; // 0-close led,1-open led
} s_nvpfm_led_current_infor;
typedef struct
{
  int logfile_id;
} s_nvpfm_logfile_id;
// for NVPFM_COMMAND_WRITE_EFUSE_KEY
typedef struct
{
  char key[64];
} s_nvpfm_efuse_key;

// for NVPFM_COMMAND_GET_SENSOR_CHANNEL_INNER_PARAM_COMMAND
typedef struct
{
  E_NVPFM_SENSOR_CHANNEL channel;
  NVPFM_IMAGE_SIZE frame_size;
} s_get_sensor_channel_inner_param;
// for NVPFM_COMMAND_GET_SENSOR_CHANNEL_INNER_PARAM_COMMAND_RETURN
typedef struct
{
  int result;     //-1获取失败 0获取成功
  float param[4]; // fx fy u0 v0
} s_get_sensor_channel_inner_param_result;

// for NVPFM_COMMAND_GET_SENSOR_CHANNEL_LUT_PARAM_COMMAND
typedef struct
{
  E_NVPFM_SENSOR_CHANNEL channel;
  NVPFM_IMAGE_SIZE frame_size;
} s_get_sensor_channel_lut_param;
// for NVPFM_COMMAND_GET_SENSOR_CHANNEL_LUT_PARAM_COMMAND_RETURN
typedef struct
{
  int result; //-1获取失败 0获取成功
  char data[0];
} s_get_sensor_channel_lut_param_result;

// for NVPFM_COMMAND_GET_DEPTH_PARAM_COMMAND
typedef struct
{
  E_NVPFM_DEPTH_CHANNEL channel;
  NVPFM_IMAGE_SIZE frame_size;
} s_get_depth_param;
typedef enum {
  E_0 = 0,
  E_90,
  E_180,
  E_270,
} E_NVPFM_ROTATE;
// for NVPFM_COMMAND_GET_DEPTH_PARAM_COMMAND_RETURN
typedef struct
{
  int result;     //-1获取失败   0-获取成功
  float param[5]; // fx fy u0 v0 baseline
  E_NVPFM_ROTATE rotate;
  float param_after_rotate[5]; // fx fy u0 v0 baseline after rotate
} s_get_depth_param_result;

typedef struct
{
  int irwidth;
  int irheight;
  int rgbwidth;
  int rgbheight;
  s_get_depth_param_result depthparam; // fx/fy/u0/v0/baseline
  float left_ir_focus[2];              // 0:fx,1:fy
  float left_ir_photocenter[2];        // 0:px,1:py
  float right_ir_focus[2];
  float right_ir_photocenter[2];
  float color_focus[2];
  float color_photocenter[2];
  float left2right_matrix[12];
  float left2color_matrix[12];
  int result;
} s_nvpfm_camera_param;
// for NVPFM_COMMAND_GET_DEPTH_GOLDEN_DIFF_COMMAND
typedef struct
{
  NVPFM_IMAGE_SIZE frame_size;
  E_NVPFM_DEPTH_CHANNEL channel;
} s_get_depth_gold_diff_param;
// for NVPFM_COMMAND_GET_DEPTH_GOLDEN_DIFF_COMMAND_RETURN
typedef struct
{
  int result; //-1获取失败 0获取成功
  char data[0];
} s_get_depth_gold_diff_param_result;

// for NVPFM_COMMAND_GET_CHANNELS_POS_PARAM_COMMAND, channel_x to channely
typedef struct
{
  E_NVPFM_SENSOR_CHANNEL channel_x;
  E_NVPFM_SENSOR_CHANNEL channel_y;
} s_get_channel_pos_param;
// for NVPFM_COMMAND_GET_CHANNELS_POS_PARAM_COMMAND_RETURN
typedef struct
{
  int result; //-1获取失败   0-获取成功
  float param[12];
} s_get_channel_pos_param_result;

typedef enum {
  NVPFM_IMU_CHANNEL0 = 0,
  NVPFM_IMU_CHANNEL1,
  NVPFM_IMU_NUMBER
} E_NVPFM_IMU_CHANNEL;

// for NVPFM_COMMAND_GET_IMU_PARAM_COMMAND
typedef struct
{
  E_NVPFM_IMU_CHANNEL channel;
  int type; // 0-内参[imu_internal_reference.txt]   1-外参0[imu.yaml]  2-外参1[camchain-imucam.yaml]
} s_get_imu_param;
// for NVPFM_COMMAND_GET_IMU_PARAM_COMMAND_RETURN
typedef struct
{
  int result; //-1获取失败 0获取成功
  char data[0];
} s_get_imu_param_result;

typedef enum {
  E_ACCEL_UNIT_METERS_PER_SQUARE_SECOND = 0x00,
  E_ACCEL_UNIT_G,
  E_ACCEL_UNIT_RAW,
  E_ACCEL_UNKNOWN
} E_ACCEL_UNIT;
typedef enum {
  E_GYRO_UNIT_DPS = 0x00,
  E_GYRO_UNIT_RAD_PER_SECOND,
  E_GYRO_UNIT_RAW,
  E_GYRO_UNKNOWN
} E_GYRO_UNIT;
/**@struct s_nvpfm_imu_config
 * @brief imu get/set information struct \n
 * define  for NVPFM_COMMAND_SET_IMU_CONFIGURATION_COMMAND
 */
typedef struct
{
  int fps; /**< IMU data acquisition frequency，IMU20948 only support 220Hz，IMU42607 support 200Hz or 400Hz */
  E_ACCEL_UNIT accel_unit;
  float g_value;
  E_GYRO_UNIT gyro_unit;
} s_nvpfm_imu_config;

typedef struct
{
  E_NVPFM_IMU_CHANNEL channel;
  s_nvpfm_imu_config config;
} s_set_imu_config;

typedef struct
{
  E_NVPFM_IMU_CHANNEL channel;
} s_get_imu_config;

typedef struct
{
  int ret;
  s_nvpfm_imu_config config;
} s_get_imu_config_ret;

typedef enum {
  EFUSE_STATUS_INVALID = 0,
  EFUSE_NO_KEY_NO_CIPER = 0x5555,
  EFUSE_HAS_KEY_NO_CIPER = 0x5A5A,
  EFUSE_HAS_KEY_HAS_CIPER = 0xA5A5,
} e_efuse_status;
// for NVPFM_COMMAND_READ_EFUSE_STATUS
typedef struct
{
  e_efuse_status status;
} s_nvpfm_efuse_status;

typedef struct
{
  int status; //-1:invalid  0：CC1  1：CC2
} s_nvpfm_usb_cc_info;

typedef struct _group_pkt_info_custom_t {
  union {
    unsigned char buffer[USB_PACKET_MAX_SIZE * 13];
    struct
    {
      unsigned char depthbuffer[USB_PACKET_MAX_SIZE];
      unsigned char rgbbuffer[USB_PACKET_MAX_SIZE * 4];
      unsigned char leftirbuffer[USB_PACKET_MAX_SIZE * 4];
      unsigned char rightirbuffer[USB_PACKET_MAX_SIZE * 4];
    };
  };
  int len;
} grouppkt_info_custom_t;

#define MAX_SENSOR_NUMBER (4)
/**@struct NVPTL_DEVICE_INFO
 * @brief falcon camera device info \n
 * define falcon camera device info,include network interface camera and usb interface camera
 */

typedef enum {
  DEPTH_L_R_CALIBRATED = 0x00,
  DEPTH_L_CALIBRATED,
  DEPTH_L_R_ORIGINAL,
  DEPTH_L_ORIGINAL,
  DEPTH,
  DEPTH_L_R_ORIGINAL_HI_RES,
  DEPTH_L_ORIGINAL_HI_RES,
  L_R_CALIBRATED,
  L_R_ORIGINAL,
  DEPTH_CUSTOMIZED, // reserved

  DEPTH_MODE_UNKNOWN = 0xFF
} E_NVPFM_DEPTH_MODE;
typedef enum {
  DEPTH_MODE = 0x0,
  S_VI,
  FACTORY,
  UPGRADE,
  OFFLINE_DEPTH,
  APP_RUN_MODE_UNKNOWN
} E_NVPFM_APP_RUN_MODE;
// for NVPFM_COMMAND_SET_APP_RUN_CONFIG_COMMAND
typedef struct
{
  E_NVPFM_APP_RUN_MODE app_run_mode;
  E_NVPFM_SENSOR_CHANNEL single_vi_channel;
  E_NVPFM_DEPTH_MODE depth_mode[MAX_DEPTH_NUMBER];

  int rgb_calibrated[MAX_SENSOR_NUMBER];
  int rgb_sync_with_depth[MAX_SENSOR_NUMBER];
  int D2C_enable[MAX_DEPTH_NUMBER];
  int enter_ready_mode_after_power_up;     // 0:上电后默认不进入ready状态(即进入stream状态)  1：上电后进入ready状态
  int depth_calculate_ctrl_after_power_up; // 上电后是否启动depth计算，bit0:only depth0  bit1:only depth1

  int reserved[58];
} s_nvpfm_app_run_config;

// for NVPFM_COMMAND_GET_APP_RUN_CONFIG_COMMAND_RETURN
typedef struct
{
  int ret;
  s_nvpfm_app_run_config config;
} s_nvpfm_get_app_run_config_ret;

// for NVPFM_COMMAND_GET_RUN_AT_READY_MODE_RETURN
typedef struct
{
  int run_at_ready_mode; /* 获取是否处于ready mode */
} s_nvpfm_run_at_ready_mode_info;

// for FEYNMAN_COMMAND_GET_CLK_CONFIG_BY_POWER_MODE
typedef struct
{
  char power_mode[32]; // 可通过设备信息的power_mode_support字段获取
} s_nvpfm_get_clk_by_power_mode;

// for FEYNMAN_COMMAND_GET_CLK_CONFIG_BY_POWER_MODE_RETURN
typedef struct
{
  int ret; // 0:ok, -1:failed
  int ddr_freq;
  int pll_isp;
  int pll_cnn;
  int cnn0_freq;
  int cnn1_freq;
  int depth_freq;
  int dsp0_freq;
  int dsp1_freq;
  int isp_freq;
  int sys_freq;
} s_nvpfm_get_clk_by_power_mode_info;

/**@struct s_nvpfm_switch_to_factory
 * @brief result of switch camera mode to factory struct \n
 * define result of switch camera mode to factory
 */
typedef struct
{
  int status; /**< 0-success else-failed */
} s_nvpfm_switch_to_factory;

/**@struct s_nvpfm_save_config
 * @brief result of save current config in camera struct \n
 * define result of save current config in camera
 */
typedef struct
{
  int status; /**< 0-success else-failed */
} s_nvpfm_save_config;

/**@struct s_nvpfm_device_id
 * @brief falcon device id struct \n
 * define falcon device id struct,corresponding NVPFM_COMMAND_GET_DEVICE_ID_COMMAND
 */
typedef struct
{
  uint32_t device_id; /**< device id of falcon */
} s_nvpfm_device_id;

/**@struct s_nvpfm_device_sn
 * @brief falcon device sn struct \n
 * define falcon device sn struct,corresponding NVPFM_COMMAND_GET_DEVICE_SN_COMMAND
 */
typedef struct
{
  uint8_t sn[16]; /**< device sn of falcon */
} s_nvpfm_device_sn;
// 无特殊说明时，set命令的返回定义
typedef struct
{
  int ret; // 0:ok -1:failed
} s_nvpfm_cmd_set_ret;
// for NVPFM_COMMAND_SET_PROJECTOR_CONFIG_COMMAND
typedef struct
{
  int open;           // 1-打开，0-关闭, open 为1时下面的值才生效， open为0时可以设置，但是不生效
  float projector_mA; // 投射器初始电流值，恒流源时表示电流值（单位mA），
  // 恒压源时表示亮度，VOLTAGE_1_GEAR：0和1  VOLTAGE_2_GEAR：0/1/2  VOLTAGE_3_GEAR：0/1/2/3
  int projector_duty;              // 投射器初始pwm占空比值, 0~100， 只对恒流源生效
  int projector_duty_auto;         // 动态切换投射器pwm占空比，1-打开，0-关闭 ， 只对恒流源生效
  int projector_open_time;         // 单帧时间内的投射器开启总时间(us)>0的任意值，projector_duty_auto为1时有效  ， 只对恒流源生效
  int projector_alarm_temperature; // ntc alarm temperature & projector current will half
  int projector_close_temperature; // ntc close temperature & projector current will close
  int projector_close_keeptime;
  int reserved[64];
} s_nvpfm_app_projector_config;

typedef enum {
  NVPFM_PROJECTOR_CHANNEL0 = 0,
  NVPFM_PROJECTOR_CHANNEL1,
  MAX_PROJECTOR_NUMBER,
  NVPFM_PROJECTOR_CHANNEL_UNKNOWN
} E_NVPFM_PROJECTOR_CHANNEL;

// for NVPFM_COMMAND_SET_PROJECTOR_CONFIG_COMMAND
typedef struct
{
  s_nvpfm_app_projector_config config;
  E_NVPFM_PROJECTOR_CHANNEL channel;
} s_nvpfm_set_projector;

// for NVPFM_COMMAND_GET_PROJECTOR_CONFIG_COMMAND
typedef struct
{
  E_NVPFM_PROJECTOR_CHANNEL channel;
} s_nvpfm_get_projector;

// for NVPFM_COMMAND_GET_PROJECTOR_CONFIG_COMMAND_RETURN
typedef struct
{
  int ret;
  s_nvpfm_app_projector_config config;
} s_nvpfm_get_projector_ret;

/**@struct s_nvpfm_sensor_resolution_fps_infor
 * @brief falcon device sensor resolution and fps information struct \n
 * define falcon device sensor resolution and fps information,corresponding NVPFM_COMMAND_GET_IR_IMAGE_SENSOR_RESOLUTION_FPS_COMMAND/NVPFM_COMMAND_SET_IR_IMAGE_SENSOR_RESOLUTION_FPS_COMMAND
 */

/**@struct s_nvpfm_rgb_awb_infor
 * @brief falcon device rgb awb information struct \n
 * define falcon device rgb awb information,corresponding NVPFM_COMMAND_GET_RGB_IMAGE_SENSOR_AWB_COMMAND/NVPFM_COMMAND_SET_RGB_IMAGE_SENSOR_AWB_COMMAND
 */
typedef struct
{
  RGB_AWB_MODE awb_mode; /**< should be [54~57] */
  uint32_t rgain;        /**< should be [52~512] */
  uint32_t bgain;        /**< should be [52~512] */
} s_nvpfm_rgb_awb_infor;

/**@struct s_nvpfm_ir_img_source
 * @brief falcon device ir image source information struct \n
 * define falcon device ir image source information
 */
typedef struct
{
  int source; /**< 0-sensor  1-sensor or ir data after rectify */
} s_nvpfm_ir_img_source;

/**@struct s_nvpfm_depth_img_source
 * @brief falcon device depth image source struct \n
 * define falcon device depth image source
 */
typedef struct
{
  int source; /**< 0-disparity  1-depth 16bit raw */
} s_nvpfm_depth_img_source;

/**@struct s_nvpfm_imu_transfer
 * @brief falcon device imu transfer status struct \n
 * define falcon device  imu transfer status
 */
typedef struct
{
  int status; /**< 0-stop transfer, 1-transfer*/
} s_nvpfm_imu_transfer;

/**@struct s_nvpfm_cam_param
 * @brief falcon device camera param struct \n
 * define falcon device camera param
 */
typedef struct
{
  int img_width;         /**< image width */
  int img_height;        /**< image height */
  int left_right_switch; /**< left right switch */
  int is_new_format;     /**< 0-old calibration file format  1-new calibration file format */

  char camera_model[16]; /**< camera model */
  int camera_number;     /**<camera number */

  float left_sensor_focus[2];       /**< [0] - focal in x, [1] - focal in y */
  float left_sensor_photocenter[2]; /**< [0] - photo center in x  [1]- photo center in y */

  float right_sensor_focus[2];       /**< [0] - focal in x,, [1] - focal in y */
  float right_sensor_photocenter[2]; /**< [0] -  photo center in x  [1]-photo center in y */

  float rgb_sensor_focus[2];       /**< [0] - focal in x,, [1] - focal in y */
  float rgb_sensor_photocenter[2]; /**< [0] -  photo center in x  [1]-photo center in y */

  float left2right_extern_param[12]; /**< to new calibration format，baseline is eft2right_extern_param[9]，to old calibration format，baseline is left2right_extern_param[3] */
  float left2rgb_extern_param[12];   /**< left and rgb extern params */
  int cam_param_valid;               /**< 1-valid,0-not valid */
  int rgb_distortion_valid;          /**< rgb distortion param valid or not */
  float rgb_distortion[5];           /**< rgb distortion param:K1K2P1P2K3 */
} s_nvpfm_cam_param;

#pragma pack(1)
typedef struct
{
  NVP_FLOAT fX;
  NVP_FLOAT fY;
  NVP_FLOAT fZ;
} IMU_APPLICATION_DATA;

typedef struct
{
  IMU_APPLICATION_DATA stGyroCaliData;
  IMU_APPLICATION_DATA stAccelCaliData;
  IMU_APPLICATION_DATA stMagnCaliData;
  NVP_FLOAT fTemCaliData;
  NVP_U64 timestamp;
} IMU_APPLICATION_DATA_STRUC;

typedef struct
{
  NVP_S32 fX;
  NVP_S32 fY;
  NVP_S32 fZ;
} IMU_FACTORY_DATA;

typedef struct
{
  IMU_FACTORY_DATA stGyroCaliData;
  IMU_FACTORY_DATA stAccelCaliData;
  IMU_FACTORY_DATA stMagnCaliData;
  NVP_FLOAT fTemCaliData;
  NVP_U64 timestamp;
} IMU_FACTORY_DATA_STRUC;

/**@struct s_nvpfm_imu_data
 * @brief falcon device imu data struct \n
 * define falcon device imu data
 */
typedef struct
{
  uint8_t channel;      // 通道号
  uint8_t factory_data; // 是否为厂测IMU数据
  uint8_t data_type;    // bit0:gyro,bit1:accel,bit2:MANG ,bit3:temp.0-disable,1-enable
  uint8_t data_number;
  uint8_t data[0]; // factory_data为0时，结构为IMU_APPLICATION_DATA_STRUC，为1时结构为IMU_FACTORY_DATA_STRUC
} s_nvpfm_imu_data;
#pragma pack()
/**@struct s_nvpfm_upgrade_data
 * @brief falcon device upgrade data struct \n
 * define falcon device upgrade data struct
 */
typedef struct
{
  uint32_t packet_numbers;      /**< total packets number */
  uint32_t curr_packet_numbers; /**< current packet index */
  uint32_t data_len;            /**< data length */
  char path[256];               /**< path in camera,just like "/nextvpu/bin/arm" */
  char name[100];               /**< file name in camera,just like "falcon" */
  char data[0];                 /**< data */
} s_nvpfm_upgrade_data;

/**@struct s_nvpfm_upgrade_result
 * @brief falcon device upgrade result struct \n
 * define falcon device upgrade result struct
 */
typedef struct
{
  int result; /**< -2can not upgrade this file，-1upgrade failed，0-current packet upgrade success，  1-upgrade complete */
} s_nvpfm_upgrade_result;

typedef void (*ASYNCCALLBACK)(void *pinfo, int len, void *userdata);

void nvpfm_get_async(NVPFM_DEVICE_HANDLE handle, NVPFM_VALUE_TYPE valuetype, ASYNCCALLBACK callback, void *userdata);
void nvpfm_set_async(NVPFM_DEVICE_HANDLE handle, NVPFM_VALUE_TYPE valuetype, uint8_t *data, int len, ASYNCCALLBACK callback, void *userdata);

/**@struct s_nvpfm_cnn_sub_data
 * @brief falcon cnn sub data infor struct \n
 * define falcon cnn sub data infor struct
 */
typedef struct
{
  int label;   /**< label value of cnn result */
  float score; /**< score value of cnn result */
  float ymin;  /**< bbox y coordination of left top point */
  float xmin;  /**< bbox x coordination of left top point */
  float ymax;  /**< bbox y coordination of right bottom point */
  float xmax;  /**< bbox x coordination of right bottom point */
} s_nvpfm_cnn_sub_data;

typedef struct
{
  int valid;
  NVPFM_IMAGE_SIZE sensorres;
  NVPFM_IMAGE_SIZE ispres;
  int fps;
} RESCOMBO;

typedef enum {
  NVPFM_LED_CHANNEL0 = 0,
  NVPFM_LED_CHANNEL1,
  MAX_LED_NUMBER,
  NVPFM_LED_CHANNEL_UNKNOWN
} E_NVPFM_LED_CHANNEL;

#define MAXSUPPORTEDRES IMAGE_UNKNOWN
#define MAX_PROJECTOR_NUM 2
typedef struct
{
  char type[32];
  float temperature[2];
} PROJECTOR_INFO;
typedef struct
{
  char type[32];
  E_NVPFM_LED_CHANNEL channel;
} led_info;
typedef enum {
  CONFIDENCE_E,
  LIGHTFILTER_E,
  GOODFEATURE_E,
  BADFILTER_E,
  LKPARAM_E,
  HIGHPRECISION_E,
  REPEATEDFILTER_E,
  SPATIALFILTER_E,
  SMEARFILTER_E,
  SPECKLEFILTER_E,
  TEMPORALFILTER_E,
  AGGPROCESS_E,
  HIGHLIGHTFILTER_E,
  LIGHTSTRIPFILTER_E,
  TEXTLIGHTFILTER_E,
  DEPTHRESIZE_E,
  GOLDENDIFF_E,
  RIGHTUPDOWN_E,
  STATICCONFIG_E,
  CONVERTTODEPTH_E,
  HIGH_LUMA_REMOVAL_E,
  HIGHPRESION_E,
  OUTLIERS_REMOVAL_E,
  DEPTH_MAP_EXPANSION_E,
  LOWTEXTURE_REMOVAL_E,
  AMBIGUITY_REMOVAL_E,
  STEREOCALI_CORRECTION_E,
  DEPTH_RANGE_JUSTMENT_1_E,
  DEPTH_RANGE_JUSTMENT_2_E,
  REPEATED_TEXTURE_E,
  FUSION2_E,
  FUSION_1_E,
  DP_MODE_1_1_E,
  DP_MODE_1_2_E,
  DP_MODE_2_1_E,
  DP_MODE_2_2_E,
  /*
    s_falcon_depth_range_adjustment3 range_adjustment3;
  s_falcon_small_disp_mask small_disp_mask;
  */
  RANGE_ADJUSTMENT3,
  SMALL_DISP_MASK,
  POSTPROCESSNUM,
} POSTPROCESS_E;

// infertool
typedef enum {
  E_HIGHLUMA_REMOVAL, // bit0
  E_HIGHPRESION,
  E_OUTLIERS_REMOVAL,
  E_DEPTH_MAP_EXPANSION,
  E_LOWTEXTURE_REMOVAL,
  E_AMBIGUITY_REMOVAL,
  E_STEREO_CALIBRATION_CORRECTION,
  E_DEPTHRANGE_ADJUSTMENT_1,
  E_DEPTHRANGE_ADJUSTMENT_2,
  E_REPEATED_TEXTURE,
  E_FUSION2,
  E_FUSION_1,
  E_DP_MODE_1_1,
  E_DP_MODE_1_2,
  E_DP_MODE_2_1,
  E_DP_MODE_2_2,
  E_DEPTHRANGE_ADJUSTMENT_3,
  E_SET_SMALL_DISP_MASK
} NVPFM_DSP_INFER_PROCESS_TYPE;

typedef enum {
  STREAM_DEPTH0,
  STREAM_DEPTH1,
  STREAM_LEFT0,
  STREAM_RIGHT0,
  STREAM_LEFT1,
  STREAM_RIGHT1,
  STREAM_RGB0,
  STREAM_RGB1
} EM_AVAILABE_STREAM_TYPE;

typedef struct
{
  E_NVPFM_SENSOR_CHANNEL left_channel;
  E_NVPFM_SENSOR_CHANNEL right_channel;
} depth_channel_info;

typedef struct
{
  E_NVPFM_SENSOR_CHANNEL channel;
} rgb_channel_info;

typedef struct
{
  depth_channel_info depth[MAX_DEPTH_NUMBER];
  rgb_channel_info rgb[MAX_RGB_NUMBER];
} IMAGE_DEV_INFO;

typedef struct
{
  E_NVPFM_IMU_CHANNEL channel;
  char type[32];
  char calib_image_channel[32];
} imu_dev_info;

typedef struct
{
  char sn[32];
  char product[32];
  char cpu_net_type[64];
  char comm_type[32];
  char projector_type[32];
  char imu_type0[32];
  char imu_type1[32];
  char software_version[32];
  char usb_speed[32];
  float cpu_temperature;
  float projector_temperature[2];
  BOOL sensor[MAX_SENSOR_NUMBER]; // 哪些sensor可用，TRUE表示可用,FALSE表示不可用
  BOOL depth[MAX_DEPTH_NUMBER];   // 总共最多2个深度,TRUE表示可用,FALSE表示不可用
  BOOL depth0[MAX_SENSOR_NUMBER]; // 第一路深度绑定的sensor序号
  BOOL depth1[MAX_SENSOR_NUMBER]; // 第二路深度绑定的sensor序号
  BOOL rgb[2];                    // 总共最多2个rgb,TRUE表示可用,FALSE表示不可用
  BOOL rgb0[MAX_SENSOR_NUMBER];   // 第一路rgb绑定的sensor序号
  BOOL rgb1[MAX_SENSOR_NUMBER];   // 第二路rgb绑定的sensor序号
  RESCOMBO irsupported[MAXSUPPORTEDRES];
  RESCOMBO colorsupported[MAXSUPPORTEDRES];
  PROJECTOR_INFO projectors[MAX_PROJECTOR_NUM];
  int projector_num;
  int imu_num;
  imu_dev_info imus[NVPFM_IMU_NUMBER];
  BOOL postprocess[POSTPROCESSNUM];
  IMAGE_DEV_INFO image_dev_info;
  led_info leds[MAX_LED_NUMBER];
  int led_num;
  BOOL issupportslavemode;
  char channelforamt[SENSOR_CHANNEL_UNKNOWN][NVPFM_IMAGE_NUMBER][32];
} s_nvpfm_dev_info;

#define MAX_CNN_GROUP_NUM 10
/**@struct s_nvpfm_cnn_data
 * @brief falcon cnn data infor struct \n
 * define falcon cnn data infor struct
 */
typedef struct
{
  int frame_id;                                  /**< frame id of cnn result */
  int groups;                                    /**< groups sum of cnn result */
  s_nvpfm_cnn_sub_data group[MAX_CNN_GROUP_NUM]; /**< groups of cnn result */
                                                 //		double start;
  uint64_t timestamp;
  int type; // EM_CNN_TYPE
} s_nvpfm_cnn_data;

/**@struct s_nvpfm_download_data
 * @brief falcon download data struct \n
 * define falcon download data struct
 */
typedef struct
{
  char file_path[256]; /**< remote camera file path */
} s_nvpfm_download_data;

/**@struct s_nvpfm_download_result
 * @brief falcon download result struct \n
 * define falcon download result struct
 */
typedef struct
{
  int result;   /**< -3 memory insufficient -2 file open failed -1 file not exist 0 success */
  char data[0]; /**< receive data */
} s_nvpfm_download_result;

/**@struct s_nvpfm_img_transfer
 * @brief falcon start/stop transfer infor struct \n
 * define falcon start/stop transfer infor struct
 */
typedef struct
{
  int status; /**< for NVPFM_COMMAND_USB_IMG_TRANSFER_COMMAND,0-stop transfer, 1-start transfer */
} s_nvpfm_img_transfer;

/**@struct s_nvpfm_img_depth_ir_transfer
 * @brief falcon depth and ir start/stop transfer infor struct \n
 * define falcon depth and ir start/stop transfer infor struct
 */
typedef struct
{
  int status; /**< for NVPFM_COMMAND_USB_IMG_DEPTH_IR_TRANSFER_COMMAND,0-stop transfer, 1-start transfer */
} s_nvpfm_img_depth_ir_transfer;

/**@struct s_nvpfm_img_depth_depth_transfer
 * @brief falcon depth start/stop transfer infor struct \n
 * define falcon depth start/stop transfer infor struct
 */
typedef struct
{
  int status; /**< for NVPFM_COMMAND_USB_IMG_DEPTH_DEPTH_TRANSFER_COMMAND,0-stop transfer, 1-start transfer */
} s_nvpfm_img_depth_depth_transfer;

/**@struct NVPFM_USB_IMAGE_HEADER
 * @brief falcon image data packet information struct \n
 * define  falcon image data packet information struct,before real image data
 */

typedef struct
{
  uint32_t group_id;
  uint32_t width;
  uint32_t height;
  uint64_t timestamp;
  uint32_t exposure;         // us
  uint32_t format;           // see NVPFM_IMAGE_FORMAT
  uint32_t rotate;           // anticlockwise  rotate
  uint32_t compress_type;    // 0-无压缩  1-lz4压缩
  uint64_t arrivaltimestamp; // timestamp of arrival from transfer layer of sdk
  uint64_t leavetimestamp;   // timestamp of leave sdk
  uint32_t reserved[9];
} NVPFM_USB_IMAGE_HEADER;

/**@struct s_nvpfm_img_depth_rgb_transfer
 * @brief falcon rgb start/stop transfer infor struct \n
 * define falcon rgb start/stop transfer infor struct
 */
typedef struct
{
  int status; /**< 0-stop transfer, 1-start transfer */
} s_nvpfm_img_depth_rgb_transfer;

/**@struct s_nvpfm_img_pointcloud_transfer
 * @brief falcon point cloud start/stop transfer infor struct \n
 * define falcon point cloud start/stop transfer infor struct
 */
typedef struct
{
  int status; /**< 0-stop transfer, 1-start transfer */
} s_nvpfm_img_pointcloud_transfer;

// for NVPFM_COMMAND_SET_SYS_TIME_COMMAND
typedef struct
{
  NVP_U64 local_time_alignto_pc_time; // 收到pc_time时的本地时间，未经校准
  NVP_U64 pc_time;                    // 系统同步来的当前时间
} s_nvpfm_time;

// for NVPFM_COMMAND_SET_SYS_TIME_COMMAND_RETURN
typedef struct
{
  NVP_U64 local_time_alignto_pc_time; // 收到pc_time时的本地时间，未经校准
  NVP_U64 pc_time;                    // 系统同步来的当前时间
  NVP_U64 local_time_calib;           // 当前本地时间，经校准
} s_nvpfm_time_ret;

// for NVPFM_COMMAND_GET_SYS_TIME_RETURN
typedef struct
{
  NVP_U64 local_time;       // 未经校准的本地时间
  NVP_U64 local_time_calib; // 当前本地时间，经校准
} s_nvpfm_time_info;

/**@struct s_nvpfm_imu_internal_reference
 * @brief imu internal reference struct \n
 * define imu internal reference struct
 */
typedef struct
{
  float accel_m[9]; /**< imu's accel matrix */
  float accel_b[3]; /**< imu's accel bias */
  float gyro_b[3];  /**< imu's gyro bias */
} s_nvpfm_imu_internal_reference;

/**@struct s_nvpfm_imu_external_reference
 * @brief imu external reference struct \n
 * define imu external reference struct
 */
typedef struct
{
  float t_cam_imu[16];      /**< rgb camera to imu external ref matrix 4x4 */
  float acc_noise_density;  /**< accel noise density */
  float acc_random_walk;    /**< acc random walk value */
  float gyro_noise_density; /**< gyro noise density */
  float gyro_random_walk;   /**< gyro random walk value */
  float timeshift_cam_imu;
} s_nvpfm_imu_external_reference;

typedef struct
{
  int rgb_format_on_dsp; // 0-YUV_NV12 1-YUV_422_PACKED
  int rgb_rectify_mode;  // 0-rgb正常校准 1-rgb保持黑边 2-rgb不校准
} s_nvpfm_rgb_else_param;

/*********************************************************************************************************************/
/*********************************************************************************************************************/
/*********************************************************************************************************************/
/************************************************使能/关闭模块********************************************************/
/*********************************************************************************************************************/
/*********************************************************************************************************************/
/*********************************************************************************************************************/
// for NVPFM_COMMAND_SET_SENSOR_STATUS_RETURN  NVPFM_COMMAND_SET_IMU_STATUS_RETURN  NVPFM_COMMAND_SET_CAN_STATUS_RETURN
// s_nvpfm_command_set_ret

// for NVPFM_COMMAND_SET_SENSOR_STATUS
typedef struct
{
  E_NVPFM_SENSOR_CHANNEL channel;
  int work;
} s_set_sensor_status;

// for NVPFM_COMMAND_SET_IMU_STATUS
typedef struct
{
  int work;
} s_set_imu_status;

// for NVPFM_COMMAND_SET_CAN_STATUS
typedef struct
{
  int work;
} s_set_can_status;

// for NVPFM_COMMAND_SET_TRANSFER_COMMAND
typedef struct
{
  int image_transfer_enable[IMAGE_TYPE_NUMBER];
  int image_transfer_frame_fps[IMAGE_TYPE_NUMBER]; // 0：默认,表示使用sensor 定义的fps
  int imu_transfer_enable[NVPFM_IMU_NUMBER];
  int32_t reserved[20];
} s_nvpfm_app_transfer_config;

typedef struct
{
  s_nvpfm_app_transfer_config config;
} s_set_transfer_config;

// for NVPFM_COMMAND_GET_TRANSFER_COMMAND
typedef struct
{
  int ret;
  s_nvpfm_app_transfer_config config;
} s_get_transfer_config_ret;

typedef struct
{
  float led_mA;             // 补光灯电流，恒流源时表示电流值（单位mA），
  int led_duty;             // 补光灯pwm占空比
  int led_auto;             // 动态切换补光灯，1-打开，0-关闭
  unsigned int th_gain_max; // 高阈值
  unsigned int th_gain_min; // 低阈值
  int reserved[63];
} s_nvpfm_app_led_config;

// for NVPFM_COMMAND_SET_LED_CONFIG_COMMAND
typedef struct
{
  s_nvpfm_app_led_config config;
  E_NVPFM_LED_CHANNEL channel;
} s_nvpfm_set_led;

// for NVPFM_COMMAND_GET_LED_CONFIG_COMMAND
typedef struct
{
  E_NVPFM_LED_CHANNEL channel;
} s_nvpfm_get_led;
// for NVPFM_COMMAND_GET_LED_CONFIG_COMMAND_RETURN
typedef struct
{
  int ret;
  s_nvpfm_app_led_config config;
} s_nvpfm_get_led_ret;

typedef struct
{
  E_NVPFM_SENSOR_CHANNEL channel;
} s_nvpfm_request_h265_i_frame;

// for FEYNMAN_COMMAND_SAVE_USER_CUSTOM_CONFIG
typedef struct
{
  char file_name[NVPFM_APP_MAX_PATH_LEN];
} s_nvpfm_save_user_custom_config;
// for FEYNMAN_COMMAND_SAVE_USER_CUSTOM_CONFIG_RETURN
typedef struct
{
  int ret; // 0-ok, 1:failed,超过最大保存数量 -1:文件名称为空
  char file_name[NVPFM_APP_MAX_PATH_LEN];
} s_nvpfm_save_user_custom_config_ret;

// for FEYNMAN_COMMAND_GET_USER_CUSTOM_CONFIG
typedef struct
{
  char file_name[NVPFM_APP_MAX_PATH_LEN];
} s_nvpfm_get_user_custom_config;
// for FEYNMAN_COMMAND_GET_USER_CUSTOM_CONFIG_RETURN
typedef struct
{
  int result; //-4 内存不足  -3 文件打开失败 -2文件不存在 -1:文件名称为空 0获取成功
  char file_name[NVPFM_APP_MAX_PATH_LEN];
  char data[0];
} s_nvpfm_get_user_custom_config_ret;

// for FEYNMAN_COMMAND_GET_USER_ALL_CUSTOM_CONFIG_NAME
// 无数据域
// for FEYNMAN_COMMAND_GET_USER_ALL_CUSTOM_CONFIG_NAME_RETURN
typedef struct
{
  int size;
  char file_name[NVPFM_MAX_USER_CUSTOM_CONFIG_SIZE][NVPFM_APP_MAX_PATH_LEN];
} s_nvpfm_get_user_all_custom_config_name_ret;

// for FEYNMAN_COMMAND_DELETE_USER_CUSTOM_CONFIG
typedef struct
{
  char file_name[NVPFM_APP_MAX_PATH_LEN];
} s_nvpfm_delete_user_custom_config;
// for FEYNMAN_COMMAND_DELETE_USER_CUSTOM_CONFIG_RETURN
typedef struct
{
  int ret; // 0-ok, -1:failed
  char file_name[NVPFM_APP_MAX_PATH_LEN];
} s_nvpfm_delete_user_custom_config_ret;

// for FEYNMAN_COMMAND_LOAD_USER_CUSTOM_CONFIG
typedef struct
{
  char file_name[NVPFM_APP_MAX_PATH_LEN];
} s_nvpfm_load_user_custom_config;
// for FEYNMAN_COMMAND_LOAD_USER_CUSTOM_CONFIG_RETURN
typedef struct
{
  int ret; // 0-ok, -1:failed
  char file_name[NVPFM_APP_MAX_PATH_LEN];
} s_nvpfm_load_user_custom_config_ret;

/**
 * @brief		initial sdk
 *
 * @note	Call it once at begining of application.
 * @return
 *	 0 : Success \n
 *	 -1 : Failed \n
 * @par Sample
 * @code
 *	if(0==nvpfm_init()){
 *	 printf("ok to init sdk!\n");
 *	}else{
 *	 printf("fail to init sdk!\n");
 *	 exit(0);
 *  };
 * @endcode
 */
int nvpfm_init(const char *logfile, int logfilemaxsize);
void nvpfm_debug_printf(const char *fmt, ...);
void nvpfm_info_printf(const char *fmt, ...);
void nvpfm_warn_printf(const char *fmt, ...);
void nvpfm_error_printf(const char *fmt, ...);

/**
 * @brief		deinitial sdk
 *
 * @note	Call it once when application exit.
 * @return
 *	none \n
 * @par Sample
 * @code
 *	nvpfm_deinit();
 * @endcode
 */
void nvpfm_deinit();

/**
 * @brief		enum falcon devices
 * @param[inout]	ptotal : int pointer,will output device numbers enumerated
 * @param[inout]	ppdevices : pointer of pointer of NVPTL_DEVICE_INFO type,will output link list of devices info enumerated
 * @note	Call it to enum falcon camera device,include usb interface and network interface
 * @return
 *	 NVPTL_OK: Success \n
 *	 else : Failed \n
 * @par Sample
 * @code
 *  int total=0;
 *  NVPTL_DEVICE_INFO* pdevices=NULL;
 *	if(NVPTL_OK==nvpfm_enum_device(&total,&pdevices)){
 *	 printf("ok to enumerate falcon cameras!\n");
 *	}else{
 *	 printf("fail to enumerate falcon cameras!\n");
 *  };
 * @endcode
 */
// NVPTL_RESULT nvpfm_enum_device(int *ptotal, NVPTL_DEVICE_INFO **ppdevices);

/**
 * @brief		get frame data of stream which type is streamtype
 * @param[in]	handle : NVPFM_DEVICE_HANDLE return by nvpfm_open
 * @param[in]	steamtype : stream type,imu/rgb/depth/ir/good feature etc.
 * @param[inout]	ppframe : pointer of pointer of NVPTL_USBHeaderDataPacket type,will output packet data received
 * @param[in]	timeout : timeout in milliseconds
 * @note	Call it to get frame data of stream which type is streamtype,block until data is received or timeout
 * @return
 *	 NVPTL_OK: Success \n
 *	 else : Failed \n
 * @par Sample
 * @code
 *  NVPTL_USBHeaderDataPacket* pframe=NULL;
 *	if(NVPTL_OK==nvpfm_get_frame(handle,NVPFM_STREAM_DEPTH,&pframe,2000)){
 *	 printf("ok to get frame data from falcon cameras!\n");
 *	}else{
 *	 printf("fail to get frame data from falcon cameras!\n");
 *  };
 * @endcode
 */
NVPTL_RESULT nvpfm_get_frame(NVPFM_DEVICE_HANDLE handle, NVPFM_STREAM_TYPE_E steamtype, NVPTL_USBHeaderDataPacket **ppframe, int timeout);

/**
 * @brief		open falcon camera and return handle for subsequence call
 * @param[in]	dev_info : NVPTL_DEVICE_INFO got by nvpfm_enum_device
 * @note	Call it to open falcon camera which device info is dev_info
 * @return
 *	 not NULL: valid handle \n
 *	 NULL : invalid handle,fail to open \n
 * @par Sample
 * @code
 *	NVPFM_DEVICE_HANDLE handle=nvpfm_open(dev_info);
 *  if(handle!=NULL)
 *	 printf("ok to open falcon camera!\n");
 *	}else{
 *	 printf("fail to open falcon camera!\n");
 *  };
 * @endcode
 */
NVPFM_DEVICE_HANDLE nvpfm_open(NVPTL_DEVICE_INFO *dev_info, EVENTCALLBACK callback, void *userdata);

/**
 * @brief		start stream which type is streamtype,data will be retrieved when callback is called
 * @param[in]	handle : NVPFM_DEVICE_HANDLE return by nvpfm_open
 * @param[in]	stream_type :  stream type,imu/rgb/depth/ir/good feature etc.
 * @param[in]	callback :  FRAMECALLBACK type callback function pointer,data will be retrieved in this function
 * @param[in]	userdata :  userdata pointer will be referenced in callback
 * @note	Call it to start stream which type is streamtype,data will be retrieved in callback function
 * @return
 *	 NVPTL_OK: Success \n
 *	 else : Failed \n
 * @par Sample
 * @code
 * void framecallback(void* data,void* userdata){
 * 	printf("received frame data which type is NVPTL_USBHeaderDataPacket!\n");
 * }
 *	if(NVPTL_OK==nvpfm_start(handle,NVPFM_STREAM_DEPTH,framecallback,NULL){
 *	 printf("ok to start stream of falcon camera!\n");
 *	}else{
 *	 printf("fail to start stream of falcon camera!\n");
 *  };
 * @endcode
 */
NVPTL_RESULT nvpfm_start(NVPFM_DEVICE_HANDLE handle, NVPFM_STREAM_TYPE_E stream_type, void *callback);

/**
 * @brief		stop stream which type is streamtype
 * @param[in]	handle : NVPFM_DEVICE_HANDLE return by nvpfm_open
 * @param[in]	stream_type :  stream type,imu/rgb/depth/ir/good feature etc.
 * @note	Call it to stop stream which type is streamtype
 * @return
 *	 NVPTL_OK: Success \n
 *	 else : Failed \n
 * @par Sample
 * @code
 *	if(NVPTL_OK==nvpfm_stop(handle,NVPFM_STREAM_DEPTH){
 *	 printf("ok to stop stream of falcon camera!\n");
 *	}else{
 *	 printf("fail to stop stream of falcon camera!\n");
 *  };
 * @endcode
 */
NVPTL_RESULT nvpfm_stop(NVPFM_DEVICE_HANDLE handle, NVPFM_STREAM_TYPE_E stream_type);

/**
 * @brief		close falcon device
 * @param[in]	handle : NVPFM_DEVICE_HANDLE return by nvpfm_open
 * @note	Call it to close falcon device.
 * @return
 *	none \n
 * @par Sample
 * @code
 *
 *  nvpfm_close(handle);
 *
 * @endcode
 */
void nvpfm_close(NVPFM_DEVICE_HANDLE handle);

/**
 * @brief		get yuv color value by index.
 * @param[in]	index : 0-255 interger
 * @param[inout]	py : pointer of unsigned char,corresponding y value(unsigned char) to index will be put
 * @param[inout]	pu : pointer of unsigned char,corresponding u value(unsigned char) to index will be put
 * @param[inout]	pv : pointer of unsigned char,corresponding v value(unsigned char) to index will be put
 * @note	Call it to get yuv color value by index.
 * @return
 *	 0 : Success to get yuv value of index \n
 *	 -1 : Failed to get yuv value of index \n
 * @par Sample
 * @code
 *  unsigned char y,u,v;
 *  printf("will get yuv value of index 23!\n");
 *  if(0==nvpfm_getyuvfromindex(23,&y,&u,&v)){
 *       printf("get yuv value of index 23 ok!\n);
 *  }
 *
 * @endcode
 */
int nvpfm_getyuvfromindex(int index, unsigned char *py, unsigned char *pu, unsigned char *pv);

typedef void (*UPGRADECALLBACK)(void *userdata, int index, int all);

/**
 * @brief		upgrade file in falcon device.
 * @param[in]	handle : NVPFM_DEVICE_HANDLE return by nvpfm_open
 * @param[in]	callback : UPGRADECALLBACK type callback function pointer,called every packet transmitted
 * @param[in]	userdata : userdata pointer will be referenced in callback
 * @param[in]	upgrade_type : NVPFM_UPGRADE_SUB_TYPE
 * @param[in]	dst_path : pointer of char,dest file path in device,not include filename itself
 * @param[in]	dst_filename : pointer of char,dest file name in device
 * @param[in]	local_filename : pointer of char,local file name,include absolute path or relative path
 * @note	Call it to upgrade file in falcon device.
 * @return
 *	 0 : Success to upgrade file \n
 *	 -1 : Failed to open file or file not exist \n
 *	 -2 : memory fault \n
 *	 -3 : error happened,stop transfer \n
 * @par Sample
 * @code
 *
 *  printf("will upgrade file of falcon in /nextvpu/bin/arm of device!\n");
 *  if(0==nvpfm_upgrade(handle,callback, userdata, NVPFM_COMMAND_USB_UPGRADE_USER_FILE,"/nextvpu/bin/arm","falcon","c:/falcon")){
 *       printf("upgrade file falcon ok!\n);
 *  }
 *
 * @endcode
 */
int nvpfm_upgrade(NVPFM_DEVICE_HANDLE handle, UPGRADECALLBACK callback, void *userdata, int upgrade_type, const char *dst_path, const char *dst_filename, const char *local_filename);
int nvpfm_upgrade_withcontent(NVPFM_DEVICE_HANDLE handle, UPGRADECALLBACK callback, void *userdata, int upgrade_type, const char *dst_path, const char *dst_filename, const char *localcontent);
/**
 * @brief		get value which type is valuetype from camera
 * @param[in]	handle : NVPFM_DEVICE_HANDLE return by nvpfm_open
 * @param[in]	valuetype : value type
 * @param[inout]	value : value pointer to save value
 * @param[in]	timeout : timeout in milliseconds
 * @note	Call it to get value from falcon device.
 * @return
 *	 NVPTL_OK : Success to get value \n
 *	 else : Failed to get value \n
 * @par Sample
 * @code
 *  int projectorstatus=0;
 *  if(NVPTL_OK==nvpfm_get(handle,NVPFM_PROJECTOR_STATUS, &projectorstatus,2000)){
 *       printf("get value from falcon ok!\n);
 *  }
 *
 * @endcode
 */
NVPTL_RESULT nvpfm_get(NVPFM_DEVICE_HANDLE handle, NVPFM_VALUE_TYPE valuetype, void *sendvalue, int sendlen, void *value, int *presponselen, int timeout);

/**
 * @brief		set value which type is valuetype to camera
 * @param[in]	handle : NVPFM_DEVICE_HANDLE return by nvpfm_open
 * @param[in]	valuetype : value type
 * @param[in]	value : value pointer to set value from
 * @param[in]	datalen : data length of value
 * @param[in]	timeout : timeout in milliseconds
 * @note	Call it to set value to camera
 * @return
 *	 NVPTL_OK : Success to get value \n
 *	 else : Failed to get value \n
 * @par Sample
 * @code
 *  int projectorstatus=0;
 *  if(NVPTL_OK==nvpfm_set(handle,NVPFM_PROJECTOR_STATUS, &projectorstatus,sizeof(int),2000)){
 *       printf("set value from falcon ok!\n);
 *  }
 *
 * @endcode
 */

NVPTL_RESULT nvpfm_set(NVPFM_DEVICE_HANDLE handle, NVPFM_VALUE_TYPE valuetype, void *sendvalue, int sendlen, void *value, int *presponselen, int timeout);

/**
 * @brief		get imu internal ref from camera
 * @param[in]	handle : NVPFM_DEVICE_HANDLE return by nvpfm_open
 * @param[inout]	ref : s_nvpfm_imu_internal_reference type pointer to save ref
 * @note	Call it to get imu internal ref from camera
 * @return
 *	 not NULL : Success to get imu internal ref \n
 *	 NULL : Failed to get imu internal ref \n
 * @par Sample
 * @code
 *  s_nvpfm_imu_internal_reference ref;
 *  if(NULL!=nvpfm_getimuinternalref(handle, &ref)){
 *       printf("get imu internal ref from falcon ok!\n);
 *  }
 *
 * @endcode
 */
s_nvpfm_imu_internal_reference *nvpfm_getimuinternalref(NVPFM_DEVICE_HANDLE handle, s_nvpfm_imu_internal_reference *ref);

/**
 * @brief		get imu external ref from camera
 * @param[in]	handle : NVPFM_DEVICE_HANDLE return by nvpfm_open
 * @param[inout]	ref : s_nvpfm_imu_external_reference type pointer to save ref
 * @note	Call it to get imu external ref from camera
 * @return
 *	 not NULL : Success to get imu external ref \n
 *	 NULL : Failed to get imu external ref \n
 * @par Sample
 * @code
 *  s_nvpfm_imu_external_reference ref;
 *  if(NULL!=nvpfm_getimuexternalref(handle, &ref)){
 *       printf("get imu external ref from falcon ok!\n);
 *  }
 *
 * @endcode
 */
#ifndef USEYAMLCPP
s_nvpfm_imu_external_reference *nvpfm_getimuexternalref(NVPFM_DEVICE_HANDLE handle, s_nvpfm_imu_external_reference *ref);
#endif

/**
 * @brief		get sdk version
 * @note	Call it to get sdk version
 * @return
 *	 not NULL : Success to get sdk version \n
 *	 NULL : Failed to get sdk version \n
 * @par Sample
 * @code
 *  printf("sdk version:%s\n",nvpfm_getsdkversion());
 *
 * @endcode
 */
const char *nvpfm_getsdkversion();
BOOL nvpfm_hasconnect(NVPFM_DEVICE_HANDLE handle);
void nvpfm_zerorect(uint16_t *depthdata, int width, int height, int fromcolindex, int tocolindex, int fromrowindex, int torowindex);

NVPTL_RESULT nvpfm_senduserdata(NVPFM_DEVICE_HANDLE handle, void *data, int size);
NVPTL_RESULT nvpfm_send_update_tftp(NVPFM_DEVICE_HANDLE handle);
void nvpfm_globaltimeenable(NVPFM_DEVICE_HANDLE handle, int enable);
void nvpfm_freedevices(NVPTL_DEVICE_INFO *thedevice);
// NVPTL_RESULT nvpfm_saveimages(NVPFM_DEVICE_HANDLE handle,const char* cameraname,const char* path,int groups);
NVPTL_RESULT nvpfm_settimesynccycle(NVPFM_DEVICE_HANDLE handle, int enable, int seconds);
void nvpfm_doeventhandle();
NVPTL_RESULT nvpfm_sendecho(NVPFM_DEVICE_HANDLE handle);
NVPTL_RESULT nvpfm_sendreboot(NVPFM_DEVICE_HANDLE handle);

#ifndef _WINDOWS
void *eventhandle(void *param);
#else
unsigned __stdcall eventhandle(void *param);
#endif
NVPTL_RESULT nvpfm_savergb2jpg(NVPTL_USBHeaderDataPacket *packet, const char *jpgfile);
#ifdef __cplusplus
}
#endif
#endif
