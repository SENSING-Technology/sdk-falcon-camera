from typing import Any, ClassVar

import numpy

class IMU_APPLICATION_DATA:
    def __init__(self) -> None: ...
    @property
    def fx(self) -> float: ...
    @property
    def fy(self) -> float: ...
    @property
    def fz(self) -> float: ...

class IMU_APPLICATION_DATA_STRUC:
    def __init__(self) -> None: ...
    @property
    def accel_cali_data(self) -> IMU_APPLICATION_DATA: ...
    @property
    def gyro_cali_data(self) -> IMU_APPLICATION_DATA: ...
    @property
    def mag_cali_data(self) -> IMU_APPLICATION_DATA: ...
    @property
    def tem_cali_data(self) -> float: ...
    @property
    def timestamp(self) -> int: ...

class IMU_FACTORY_DATA:
    def __init__(self) -> None: ...
    @property
    def fx(self) -> int: ...
    @property
    def fy(self) -> int: ...
    @property
    def fz(self) -> int: ...

class IMU_FACTORY_DATA_STRUC:
    def __init__(self) -> None: ...
    @property
    def accel_cali_data(self) -> IMU_FACTORY_DATA: ...
    @property
    def gyro_cali_data(self) -> IMU_FACTORY_DATA: ...
    @property
    def mag_cali_data(self) -> IMU_FACTORY_DATA: ...
    @property
    def tem_cali_data(self) -> float: ...
    @property
    def timestamp(self) -> int: ...

class RESCOMBO:
    def __init__(self) -> None: ...
    @property
    def fps(self) -> int: ...
    @property
    def ispres(self) -> py_nvpfm.NVPFM_IMAGE_SIZE: ...
    @property
    def sensorres(self) -> py_nvpfm.NVPFM_IMAGE_SIZE: ...
    @property
    def valid(self) -> int: ...

class event_data:
    def __init__(self) -> None: ...
    @property
    def dev_name(self) -> str: ...
    @property
    def event_type(self) -> Any: ...
    @property
    def fps(self) -> float: ...
    @property
    def frame_data_array(self) -> numpy.ndarray: ...
    @property
    def frame_height(self) -> int: ...
    @property
    def frame_width(self) -> int: ...
    @property
    def imu_application_data(self) -> IMU_APPLICATION_DATA_STRUC: ...
    @property
    def imu_channel(self) -> int: ...
    @property
    def imu_data_number(self) -> int: ...
    @property
    def imu_data_type(self) -> int: ...
    @property
    def imu_factory_data(self) -> IMU_FACTORY_DATA_STRUC: ...
    @property
    def imu_is_factory(self) -> bool: ...

class py_nvpfm:
    class NVPFM_IMAGE_SIZE:
        __members__: ClassVar[dict] = ...  # read-only
        IMAGE_1280_1080: ClassVar[py_nvpfm.NVPFM_IMAGE_SIZE] = ...
        IMAGE_1280_480: ClassVar[py_nvpfm.NVPFM_IMAGE_SIZE] = ...
        IMAGE_1280_720: ClassVar[py_nvpfm.NVPFM_IMAGE_SIZE] = ...
        IMAGE_1280_800: ClassVar[py_nvpfm.NVPFM_IMAGE_SIZE] = ...
        IMAGE_1280_960: ClassVar[py_nvpfm.NVPFM_IMAGE_SIZE] = ...
        IMAGE_1600_1200: ClassVar[py_nvpfm.NVPFM_IMAGE_SIZE] = ...
        IMAGE_1920_1080: ClassVar[py_nvpfm.NVPFM_IMAGE_SIZE] = ...
        IMAGE_320_200: ClassVar[py_nvpfm.NVPFM_IMAGE_SIZE] = ...
        IMAGE_320_240: ClassVar[py_nvpfm.NVPFM_IMAGE_SIZE] = ...
        IMAGE_480_300: ClassVar[py_nvpfm.NVPFM_IMAGE_SIZE] = ...
        IMAGE_480_640: ClassVar[py_nvpfm.NVPFM_IMAGE_SIZE] = ...
        IMAGE_640_360: ClassVar[py_nvpfm.NVPFM_IMAGE_SIZE] = ...
        IMAGE_640_400: ClassVar[py_nvpfm.NVPFM_IMAGE_SIZE] = ...
        IMAGE_640_480: ClassVar[py_nvpfm.NVPFM_IMAGE_SIZE] = ...
        IMAGE_768_480: ClassVar[py_nvpfm.NVPFM_IMAGE_SIZE] = ...
        IMAGE_800_600: ClassVar[py_nvpfm.NVPFM_IMAGE_SIZE] = ...
        IMAGE_848_480: ClassVar[py_nvpfm.NVPFM_IMAGE_SIZE] = ...
        IMAGE_960_1280: ClassVar[py_nvpfm.NVPFM_IMAGE_SIZE] = ...
        IMAGE_960_600: ClassVar[py_nvpfm.NVPFM_IMAGE_SIZE] = ...
        IMAGE_UNKNOWN: ClassVar[py_nvpfm.NVPFM_IMAGE_SIZE] = ...
        __entries: ClassVar[dict] = ...
        def __init__(self, value: int) -> None: ...
        def __eq__(self, other: object) -> bool: ...
        def __getstate__(self) -> int: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __ne__(self, other: object) -> bool: ...
        def __setstate__(self, state: int) -> None: ...
        @property
        def name(self) -> str: ...
        @property
        def value(self) -> int: ...

    class ev_type:
        __members__: ClassVar[dict] = ...  # read-only
        Depth: ClassVar[py_nvpfm.ev_type] = ...
        DepthPseudo: ClassVar[py_nvpfm.ev_type] = ...
        Group: ClassVar[py_nvpfm.ev_type] = ...
        IMU: ClassVar[py_nvpfm.ev_type] = ...
        LeftIR: ClassVar[py_nvpfm.ev_type] = ...
        RGB: ClassVar[py_nvpfm.ev_type] = ...
        RightIR: ClassVar[py_nvpfm.ev_type] = ...
        __entries: ClassVar[dict] = ...
        def __init__(self, value: int) -> None: ...
        def __eq__(self, other: object) -> bool: ...
        def __getstate__(self) -> int: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __ne__(self, other: object) -> bool: ...
        def __setstate__(self, state: int) -> None: ...
        @property
        def name(self) -> str: ...
        @property
        def value(self) -> int: ...
    Depth: ClassVar[py_nvpfm.ev_type] = ...
    DepthPseudo: ClassVar[py_nvpfm.ev_type] = ...
    Group: ClassVar[py_nvpfm.ev_type] = ...
    IMU: ClassVar[py_nvpfm.ev_type] = ...
    LeftIR: ClassVar[py_nvpfm.ev_type] = ...
    RGB: ClassVar[py_nvpfm.ev_type] = ...
    RightIR: ClassVar[py_nvpfm.ev_type] = ...
    def __init__(self) -> None: ...
    def get_dev_info(self) -> list[s_nvpfm_dev_info]: ...
    def get_event_enabled(self, arg0) -> bool: ...
    def init_and_start(self, arg0: str, arg1: int) -> int: ...
    def read_data(self) -> list[event_data]: ...
    def set_event_enabled(self, arg0, arg1: bool) -> None: ...
    def stop(self) -> None: ...

class s_nvpfm_dev_info:
    def __init__(self) -> None: ...
    @property
    def colorsupported(self) -> RESCOMBO: ...
    @property
    def comm_type(self) -> str: ...
    @property
    def cpu_net_type(self) -> str: ...
    @property
    def cpu_temperature(self) -> float: ...
    @property
    def depth(self) -> list[bool]: ...
    @property
    def depth0(self) -> list[bool]: ...
    @property
    def depth1(self) -> list[bool]: ...
    @property
    def imu_type0(self) -> str: ...
    @property
    def imu_type1(self) -> str: ...
    @property
    def irsupported(self) -> RESCOMBO: ...
    @property
    def product(self) -> str: ...
    @property
    def projector_temperature(self) -> float: ...
    @property
    def projector_type(self) -> str: ...
    @property
    def rgb(self) -> list[bool]: ...
    @property
    def rgb0(self) -> list[bool]: ...
    @property
    def rgb1(self) -> list[bool]: ...
    @property
    def sensor(self) -> list[bool]: ...
    @property
    def sn(self) -> str: ...
    @property
    def software_version(self) -> str: ...
